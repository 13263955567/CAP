{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CAP CAP is a library based on .Net standard, which is a solution to deal with distributed transactions, also has the function of EventBus, it is lightweight, easy to use, and efficiently. Introduction In the process of building an SOA or MicroService system, we usually need to use the event to integrate each services. In the process, the simple use of message queue does not guarantee the reliability. CAP is adopted the local message table program integrated with the current database to solve the exception may occur in the process of the distributed system calling each other. It can ensure that the event messages are not lost in any case. You can also use the CAP as an EventBus. The CAP provides a simpler way to implement event publishing and subscriptions. You do not need to inherit or implement any interface during the process of subscription and sending. CAP implements the Outbox Pattern described in the eShop ebook Atomicity when publishing events to the event bus with a worker microservice For detailed instructions see the getting started guide . Contributing One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes. If you have any question or problems, please report them on the CAP repository: Report Issue Active Issues License CAP is licensed under the MIT license .","title":"Home"},{"location":"#cap","text":"CAP is a library based on .Net standard, which is a solution to deal with distributed transactions, also has the function of EventBus, it is lightweight, easy to use, and efficiently.","title":"CAP"},{"location":"#introduction","text":"In the process of building an SOA or MicroService system, we usually need to use the event to integrate each services. In the process, the simple use of message queue does not guarantee the reliability. CAP is adopted the local message table program integrated with the current database to solve the exception may occur in the process of the distributed system calling each other. It can ensure that the event messages are not lost in any case. You can also use the CAP as an EventBus. The CAP provides a simpler way to implement event publishing and subscriptions. You do not need to inherit or implement any interface during the process of subscription and sending. CAP implements the Outbox Pattern described in the eShop ebook Atomicity when publishing events to the event bus with a worker microservice For detailed instructions see the getting started guide .","title":"Introduction"},{"location":"#contributing","text":"One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes. If you have any question or problems, please report them on the CAP repository: Report Issue Active Issues","title":"Contributing"},{"location":"#license","text":"CAP is licensed under the MIT license .","title":"License"},{"location":"about/contact-us/","text":"Contact Us Authors Author: @yang-xiaodong Email: Blogs: https://saborboard.cnblogs.com NCC Organization Email: Twitter: https://twitter.com/ncc_community Weibo: https://weibo.com/dotnetcore","title":"Contact Us"},{"location":"about/contact-us/#contact-us","text":"","title":"Contact Us"},{"location":"about/contact-us/#authors","text":"Author: @yang-xiaodong Email: Blogs: https://saborboard.cnblogs.com","title":"Authors"},{"location":"about/contact-us/#ncc-organization","text":"Email: Twitter: https://twitter.com/ncc_community Weibo: https://weibo.com/dotnetcore","title":"NCC Organization"},{"location":"about/contributing/","text":"Contributing Pull requests, issues and commentary welcome! No special process just create a request and get in touch either via gitter or create an issue.","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Pull requests, issues and commentary welcome! No special process just create a request and get in touch either via gitter or create an issue.","title":"Contributing"},{"location":"about/license/","text":"License MIT License Copyright 2016 - 2019 Saborboard Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"MIT License Copyright 2016 - 2019 Saborboard Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Release Notes Version 2.4.2 (2019-01-08) Features: Startup the CAP with the .NET Core 2.1 BackgroundService. ( #265 ) Improved message delivery performance. #261 Bug Fixed: Fixed PostgreSql version isolation feature bug. ( #256 ) Fixed SQL Server sql bug for dashboard search. ( #266 ) Version 2.4.1 (2018-12-19) Bug Fixed: Fixed MongoDB version isolation feature bug. ( #253 ) Version 2.4.0 (2018-12-08) Features: Supported version options. ( #220 ) Upgrade nuget package to .net core 2.2. Breaking Changes: In order to support the \"version isolation\" feature, we introduced a new version field in version 2.4.0 to isolate different versions of the message, so this requires some adjustments to the database table structure. You can use the following SQL to add a version field to your database CAP related table. MySQL 1 2 ALTER TABLE ` cap . published ` ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE ` cap . received ` ADD Version VARCHAR ( 20 ) NULL ; SQL Server 1 2 ALTER TABLE Cap .[ Published ] ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE Cap .[ Received ] ADD Version VARCHAR ( 20 ) NULL ; PostgreSQL 1 2 ALTER TABLE cap . published ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE cap . received ADD Version VARCHAR ( 20 ) NULL ; MongoDb 1 2 db.CapPublishedMessage.update({},{ $set : { Version : 1 }}); db.CapReceivedMessage.update({},{ $set : { Version : 1 }}); Bug Fixed: Fixed different groups of the same topic name in one instance will cause routing bug. ( #235 ) Fixed message presistence bug. ( #240 ) Fixed RabbitMQ topic name contains numbers will cause exception bug. ( #181 ) Version 2.3.1 (2018-10-29) Features: Add Source Link Support Upgrade dependent NuGet packages. Bug Fixed: Fixed dashboard messages requeue error. ( #205 ) Adjustment snowflake workerId to random id. Fixed flush unclaer data bug. Version 2.3.0 (2018-08-30) In this version, we made some breaking changes for the publisher API, you can see this blog to understand the story behind. If you have any migration question, please comment in issue ( #190 ). Breaking Changes: Removed app.UseCap() from Startup.cs Message table primary key data type has been modified to Bigint and non auto-Increment. ( #180 ) New publisher Api. ( #188 ) Features: MongoDb supported. ( #143 ) Automatic commit transaction. ( #191 ) Bug Fixed: Fix message still sent if transaction faild bug. ( #118 ) Multiple events in one transaction. ( #171 ) Version 2.2.5 (2018-07-19) Features: - Performance improvement Bug Fixed: Fixed message enqueue exception. Fixed Retry processor bugs. Fixed Kafka producer exception log without logging when publish message. Fixed Incorrect local IP address judgment of IPv6. ( #140 ) Fixed DateTime localization format conversion error to sql. ( #139 ) Fixed dashboard message page re-requeue and re-executed operate bug. ( #158 ) Fixed SendAsync or ExecuteAsync recursion retries bug. ( #160 ) Fixed configuration options of FailedThresholdCallback could not be invoke when the value less then three. ( #161 ) Version 2.2.4 (2018-06-05) Because version 2.2.3 was not released to nuget, so released 2.2.4. Version 2.2.3 (2018-06-05) Features: Improved log output. Upgrade nuget packages. Support pattern matching for consumer. ( #132 ) Bug Fixed: Fixed exception thrown when terminate the program with Ctrl+C. ( #130 ) Version 2.2.2 (2018-04-28) Features: Improved log output. #114 Add default timeout configuration for kafka client. Rename configuration options FailedCallback to FailedThresholdCallback. Bug Fixed: Fixed message enqueue exception. Fixed retry processor bugs. Fixed kafka producer exception log without logging when publish message. Version 2.2.1 (2018-04-18) Bug Fixed: Fixed message enqueue bug in v2.2 Version 2.2.0 (2018-04-17) Features: Remove database queue mode. ( #102 ) Support for Diagnostics. ( #112 ) Upgrade dependent nuget packages. Bug Fixed: Fixed bug of the FailedRetryCount does not increase when raised SubscribeNotFoundException. ( #90 ) Version 2.1.4 (2018-03-16) Features: Remove TableNamePrefix option from MySqlOptions to EFOptions. Upgrade nuget package Bug Fixed: Fixed the connection bug of getting message from table. ( #83 ) Fixed entityframework rename table name prefix bug. ( #84 ) Fixed sql server scripts bug of create table scheme. ( #85 ) Fixed thread safety issue about KafkaOptions.( #89 ) Version 2.1.3 (2018-01-24) Features: Upgrade dependent nuget packages version. NuGet package include xml doc now. NuGet now contains the CAP symbol files. Bug Fixed: Fixed thread conflict issue when sending messages with PublishAsync. ( #80 ) Fixed kafka received message sava failed may caused the mssage loss bug. ( #78 ) Fixed dashboard js syntax issue. ( #77 ) Version 2.1.2 (2017-12-18) Bug Fixed: Fixed and improve the performance of mysql processing messages. ( #68 ) ( #36 ) Fixed dashboard manually trigger reconsumption bug. ( #67 ) Fixed mysql 5.5 table initialization bug. ( #65 ) Fixed mysql message queue executor bug. ( #66 ) Version 2.1.1 (2017-11-28) Bug Fixed: Fixed 'dotnet.exe' process incomplete quit when shutdown application (Ctrl+C). ( #64 ) Fixed failure to issue as expected of RabbitMQ SubscriberNotFoundException. ( #63 ) Fixed Sent async message in the loop causes an exception. ( #62 ) Version 2.1.0 (2017-11-17) Features: Interface display optimization of dashboard. Adds a more friendly display when looks at the message content. Now you can see the exception infomation in the message conent filed when message send or executed failed. Optimize LAN to see Dashboard without authentication. Add IContentSerializer interface, you can customize the serialized message content. Add IMessagePacker interface, you can customize wapper of the message. Upgrade the dependent package. Bug Fixed: Fixed dashboard query bugs. Fixed dashboard multilanguage display bugs. Fixed RabbitMQ connection pool bug. Fixed dashboard display bugs on mobile. Version 2.0.2 (2017-09-29) Bug Fixed: Fixed asp.net core 2.0 startup error of MySql and PostgreSql. ( #44 Version 2.0.1 (2017-09-16) Bug Fixed: DbContext services bug. ( #44 ) Dependency injection bug. ( #45 ) Version 2.0.0 (2017-09-01) Features: Supported .net standard 2.0. Supported PostgreSQL 9.5+. Supported asynchronous function subscriptions. ICapPublisher api supported callback subsrciber. Bug Fixed: Fixed multiple subscriber subscribe bug. ( #38 ) Fixed model binde bug. ( #17 ) ( #18 ) Fixed database connection disposed bug. ( #25 ) Fixed consumer method injection context bug. ( #34 ) Version 1.1.0 (2017-08-04) Features: Support MySQL database persistent message. Add message failed call-back in CapOptions. Remove publish messages API of string name at ICapPublisher . Bug Fixed: Fixed can not send message for string type. ( #17 ) Fixed model bind for type like datetime guid always failed. ( #18 ) Version 1.0.1 (2017-07-25) Features: ICapPublisher interface added synchronous publish API. Add infinity retry failed processor. Version 1.0.0 (2017-07-19) Project published","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#version-242-2019-01-08","text":"Features: Startup the CAP with the .NET Core 2.1 BackgroundService. ( #265 ) Improved message delivery performance. #261 Bug Fixed: Fixed PostgreSql version isolation feature bug. ( #256 ) Fixed SQL Server sql bug for dashboard search. ( #266 )","title":"Version 2.4.2 (2019-01-08)"},{"location":"about/release-notes/#version-241-2018-12-19","text":"Bug Fixed: Fixed MongoDB version isolation feature bug. ( #253 )","title":"Version 2.4.1 (2018-12-19)"},{"location":"about/release-notes/#version-240-2018-12-08","text":"Features: Supported version options. ( #220 ) Upgrade nuget package to .net core 2.2. Breaking Changes: In order to support the \"version isolation\" feature, we introduced a new version field in version 2.4.0 to isolate different versions of the message, so this requires some adjustments to the database table structure. You can use the following SQL to add a version field to your database CAP related table. MySQL 1 2 ALTER TABLE ` cap . published ` ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE ` cap . received ` ADD Version VARCHAR ( 20 ) NULL ; SQL Server 1 2 ALTER TABLE Cap .[ Published ] ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE Cap .[ Received ] ADD Version VARCHAR ( 20 ) NULL ; PostgreSQL 1 2 ALTER TABLE cap . published ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE cap . received ADD Version VARCHAR ( 20 ) NULL ; MongoDb 1 2 db.CapPublishedMessage.update({},{ $set : { Version : 1 }}); db.CapReceivedMessage.update({},{ $set : { Version : 1 }}); Bug Fixed: Fixed different groups of the same topic name in one instance will cause routing bug. ( #235 ) Fixed message presistence bug. ( #240 ) Fixed RabbitMQ topic name contains numbers will cause exception bug. ( #181 )","title":"Version 2.4.0 (2018-12-08)"},{"location":"about/release-notes/#version-231-2018-10-29","text":"Features: Add Source Link Support Upgrade dependent NuGet packages. Bug Fixed: Fixed dashboard messages requeue error. ( #205 ) Adjustment snowflake workerId to random id. Fixed flush unclaer data bug.","title":"Version 2.3.1 (2018-10-29)"},{"location":"about/release-notes/#version-230-2018-08-30","text":"In this version, we made some breaking changes for the publisher API, you can see this blog to understand the story behind. If you have any migration question, please comment in issue ( #190 ). Breaking Changes: Removed app.UseCap() from Startup.cs Message table primary key data type has been modified to Bigint and non auto-Increment. ( #180 ) New publisher Api. ( #188 ) Features: MongoDb supported. ( #143 ) Automatic commit transaction. ( #191 ) Bug Fixed: Fix message still sent if transaction faild bug. ( #118 ) Multiple events in one transaction. ( #171 )","title":"Version 2.3.0 (2018-08-30)"},{"location":"about/release-notes/#version-225-2018-07-19","text":"Features: - Performance improvement Bug Fixed: Fixed message enqueue exception. Fixed Retry processor bugs. Fixed Kafka producer exception log without logging when publish message. Fixed Incorrect local IP address judgment of IPv6. ( #140 ) Fixed DateTime localization format conversion error to sql. ( #139 ) Fixed dashboard message page re-requeue and re-executed operate bug. ( #158 ) Fixed SendAsync or ExecuteAsync recursion retries bug. ( #160 ) Fixed configuration options of FailedThresholdCallback could not be invoke when the value less then three. ( #161 )","title":"Version 2.2.5 (2018-07-19)"},{"location":"about/release-notes/#version-224-2018-06-05","text":"Because version 2.2.3 was not released to nuget, so released 2.2.4.","title":"Version 2.2.4 (2018-06-05)"},{"location":"about/release-notes/#version-223-2018-06-05","text":"Features: Improved log output. Upgrade nuget packages. Support pattern matching for consumer. ( #132 ) Bug Fixed: Fixed exception thrown when terminate the program with Ctrl+C. ( #130 )","title":"Version 2.2.3 (2018-06-05)"},{"location":"about/release-notes/#version-222-2018-04-28","text":"Features: Improved log output. #114 Add default timeout configuration for kafka client. Rename configuration options FailedCallback to FailedThresholdCallback. Bug Fixed: Fixed message enqueue exception. Fixed retry processor bugs. Fixed kafka producer exception log without logging when publish message.","title":"Version 2.2.2 (2018-04-28)"},{"location":"about/release-notes/#version-221-2018-04-18","text":"Bug Fixed: Fixed message enqueue bug in v2.2","title":"Version 2.2.1 (2018-04-18)"},{"location":"about/release-notes/#version-220-2018-04-17","text":"Features: Remove database queue mode. ( #102 ) Support for Diagnostics. ( #112 ) Upgrade dependent nuget packages. Bug Fixed: Fixed bug of the FailedRetryCount does not increase when raised SubscribeNotFoundException. ( #90 )","title":"Version 2.2.0 (2018-04-17)"},{"location":"about/release-notes/#version-214-2018-03-16","text":"Features: Remove TableNamePrefix option from MySqlOptions to EFOptions. Upgrade nuget package Bug Fixed: Fixed the connection bug of getting message from table. ( #83 ) Fixed entityframework rename table name prefix bug. ( #84 ) Fixed sql server scripts bug of create table scheme. ( #85 ) Fixed thread safety issue about KafkaOptions.( #89 )","title":"Version 2.1.4 (2018-03-16)"},{"location":"about/release-notes/#version-213-2018-01-24","text":"Features: Upgrade dependent nuget packages version. NuGet package include xml doc now. NuGet now contains the CAP symbol files. Bug Fixed: Fixed thread conflict issue when sending messages with PublishAsync. ( #80 ) Fixed kafka received message sava failed may caused the mssage loss bug. ( #78 ) Fixed dashboard js syntax issue. ( #77 )","title":"Version 2.1.3 (2018-01-24)"},{"location":"about/release-notes/#version-212-2017-12-18","text":"Bug Fixed: Fixed and improve the performance of mysql processing messages. ( #68 ) ( #36 ) Fixed dashboard manually trigger reconsumption bug. ( #67 ) Fixed mysql 5.5 table initialization bug. ( #65 ) Fixed mysql message queue executor bug. ( #66 )","title":"Version 2.1.2 (2017-12-18)"},{"location":"about/release-notes/#version-211-2017-11-28","text":"Bug Fixed: Fixed 'dotnet.exe' process incomplete quit when shutdown application (Ctrl+C). ( #64 ) Fixed failure to issue as expected of RabbitMQ SubscriberNotFoundException. ( #63 ) Fixed Sent async message in the loop causes an exception. ( #62 )","title":"Version 2.1.1 (2017-11-28)"},{"location":"about/release-notes/#version-210-2017-11-17","text":"Features: Interface display optimization of dashboard. Adds a more friendly display when looks at the message content. Now you can see the exception infomation in the message conent filed when message send or executed failed. Optimize LAN to see Dashboard without authentication. Add IContentSerializer interface, you can customize the serialized message content. Add IMessagePacker interface, you can customize wapper of the message. Upgrade the dependent package. Bug Fixed: Fixed dashboard query bugs. Fixed dashboard multilanguage display bugs. Fixed RabbitMQ connection pool bug. Fixed dashboard display bugs on mobile.","title":"Version 2.1.0 (2017-11-17)"},{"location":"about/release-notes/#version-202-2017-09-29","text":"Bug Fixed: Fixed asp.net core 2.0 startup error of MySql and PostgreSql. ( #44","title":"Version 2.0.2 (2017-09-29)"},{"location":"about/release-notes/#version-201-2017-09-16","text":"Bug Fixed: DbContext services bug. ( #44 ) Dependency injection bug. ( #45 )","title":"Version 2.0.1 (2017-09-16)"},{"location":"about/release-notes/#version-200-2017-09-01","text":"Features: Supported .net standard 2.0. Supported PostgreSQL 9.5+. Supported asynchronous function subscriptions. ICapPublisher api supported callback subsrciber. Bug Fixed: Fixed multiple subscriber subscribe bug. ( #38 ) Fixed model binde bug. ( #17 ) ( #18 ) Fixed database connection disposed bug. ( #25 ) Fixed consumer method injection context bug. ( #34 )","title":"Version 2.0.0 (2017-09-01)"},{"location":"about/release-notes/#version-110-2017-08-04","text":"Features: Support MySQL database persistent message. Add message failed call-back in CapOptions. Remove publish messages API of string name at ICapPublisher . Bug Fixed: Fixed can not send message for string type. ( #17 ) Fixed model bind for type like datetime guid always failed. ( #18 )","title":"Version 1.1.0 (2017-08-04)"},{"location":"about/release-notes/#version-101-2017-07-25","text":"Features: ICapPublisher interface added synchronous publish API. Add infinity retry failed processor.","title":"Version 1.0.1 (2017-07-25)"},{"location":"about/release-notes/#version-100-2017-07-19","text":"Project published","title":"Version 1.0.0 (2017-07-19)"},{"location":"user-guide/api-interface/","text":"Interfaces CAP only has one interface,It is ICapPublisher , You can get its instance from the DI container and then call it. Publish Send You can use the Publish T or PublishAsync T methods defined in the ICapPublisher interface to send the event messages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class PublishController : Controller { private readonly ICapPublisher _capBus ; public PublishController ( ICapPublisher capPublisher ) { _capBus = capPublisher ; } [Route( ~/adonet/transaction )] public IActionResult AdonetWithTransaction () { using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : true )) { //your business code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } } return Ok (); } [Route( ~/ef/transaction )] public IActionResult EntityFrameworkWithTransaction ([ FromServices ] AppDbContext dbContext ) { using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : true )) { //your business code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } return Ok (); } } The following is the signature of the of the PublishAsync method 1 PublishAsync T ( string name , T object ) By default,when this method(PublishAsync ) is called,CAP will create a transaction internally, and then write messages into the Cap.Published message table. In some situations,you may need a callback when a message is sent out, you can use the follwing overload of the PublishAsync T method: 1 PublishAsync T ( string name , T object , string callBackName ) In this overload method, callbackName is the callback name of the subscription method,when the consumption-side finished processing messages,CAP will return the processed result and also call the specified subscription method Transactions Transaction plays a very import role in CAP, It is a main factor to ensure the reliability of messaging. In the process of sending a message to the message queue without transaction we can not ensure that messages are sent to the message queue successfully after we finish dealing the business logic,or messages are send to the message queque successfully but our bussiness logic is failed. There is a variety of reasons that causing failure,eg:connection errors,network errors,etc. Note Only by putting the business logic and logic in the Publish of CAP in the same transaction so that we can enssure both them to be success or fail The following two blocks of code snippet demonstrate how to use transactions in EntityFramework and dapper when publishing messages. EntityFramework 1 2 3 4 5 6 7 8 using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false ) { // Your business logic\u3002 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); trans . Commit (); } When you set the autoCommit : false , you can put your business logic before or after the Publish logic,the only thing you need to do is to ensure that they are in the same transaction. If you set the autoCommit : true , you need publish message _capBus.Publish at the last. During the course,the message content will be serialized as json and stored in the message table. Dapper 1 2 3 4 5 6 7 8 9 10 11 12 using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( insert into test(name) values( test ) , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( sample.rabbitmq.mysql , DateTime . Now ); transaction . Commit (); } } Subscribe Consume Warning The businsess logics in the subscription side should be keep idempotent. You can view more details in this ISSUE . Use CapSubscribe[ ] to decorate a method so that it can subscribe messages published by CAP. 1 2 3 4 [CapSubscribe( xxx.services.bar )] public void BarMessageProcessor () { } You can also use multiple CapSubscribe[ ] to decorate a method so that you can subscribe messages from different sources accordingly. 1 2 3 4 5 [CapSubscribe( xxx.services.bar )] [CapSubscribe( xxx.services.foo )] public void BarAndFooMessageProcessor () { } xxx.services.bar is the name of the message to be subscribed.And it has different name in different message queque Clients.for example,in kafka the name is called Topic Name and in RAbbitMQ it is called RouteKey. In RabbitMQ you can use regular expression in RouteKey: * (Asterisk) stands for a single word. # (hash sign) standards for zero or more words. See the following picture(P for Publisher,X for Exchange,C for consumer and Q for Queue) In this example, we're going to send messages which all describe animals. The messages will be sent with a routing key that consists of three words (two dots). The first word in the routing key will describe a celerity, second a colour and third a species: \" . . \". We created three bindings: Q1 is bound with binding key \" .orange. \" and Q2 with \" . .rabbit\" and \"lazy.#\". These bindings can be summarised as: Q1 is interested in all the orange animals.Q2 wants to hear everything about rabbits, and everything about lazy animals.A message with a routing key set to \"quick.orange.rabbit\" will be delivered to both queues. Message \"lazy.orange.elephant\" also will go to both of them. On the other hand \"quick.orange.fox\" will only go to the first queue, and \"lazy.brown.fox\" only to the second. \"lazy.pink.rabbit\" will be delivered to the second queue only once, even though it matches two bindings. \"quick.brown.fox\" doesn't match any binding so it will be discarded. What happens if we break our contract and send a message with one or four words, like \"orange\" or \"quick.orange.male.rabbit\"? Well, these messages won't match any bindings and will be lost. On the other hand \"lazy.orange.male.rabbit\", even though it has four words, will match the last binding and will be delivered to the second queue. In CAP, we called a method decorated by CapSubscribe[] a subscriber , you can group different subscribers. Group is a collection of subscribers,each group can have one or multiple consumers,but a subscriber can only belongs to a certain group(you can not put a subscriber into multiple groups).Messages subscribed by members in a certain group can only be consumed once. If you do not specify any group when subscribing,CAP will put the subscriber into a default group named cap.default.group the following is a demo shows how to use group when subscribing. 1 2 3 4 5 [CapSubscribe( xxx.services.foo , Group = moduleA )] public void FooMessageProcessor () { } Exceptional case The following situations you shoud be aware of. \u2460 the subscription side has not started yet when publishing a message Kafka In Kafka,published messages stored in the Persistent log files,so messages will not lost.when the subscription side started,it can still consume the message. RabbitMQ In RabbitMQ, the application will create Persistent Exchange and Queue at the first start , CAP will create a new consumer queue for each consumer group, because the application started but the subscription side hasn's start yet so there has no queue,thus the message can not be persited,and the published messages will lost There are two ways to solve this message lost issue in RamitMQ: Before the deployment of your application,you can create durable Exchange and Queue in RabbitMQ by hand,the default names them are (cap.default.topic, cap.default.group). Run all instances in advance to ensure that both Exchange and Queue are initialized. It is highly recommanded that users adopt the second way,because it is easier to achieve.","title":"API Interface"},{"location":"user-guide/api-interface/#interfaces","text":"CAP only has one interface,It is ICapPublisher , You can get its instance from the DI container and then call it.","title":"Interfaces"},{"location":"user-guide/api-interface/#publish-send","text":"You can use the Publish T or PublishAsync T methods defined in the ICapPublisher interface to send the event messages. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class PublishController : Controller { private readonly ICapPublisher _capBus ; public PublishController ( ICapPublisher capPublisher ) { _capBus = capPublisher ; } [Route( ~/adonet/transaction )] public IActionResult AdonetWithTransaction () { using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : true )) { //your business code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } } return Ok (); } [Route( ~/ef/transaction )] public IActionResult EntityFrameworkWithTransaction ([ FromServices ] AppDbContext dbContext ) { using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : true )) { //your business code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } return Ok (); } } The following is the signature of the of the PublishAsync method 1 PublishAsync T ( string name , T object ) By default,when this method(PublishAsync ) is called,CAP will create a transaction internally, and then write messages into the Cap.Published message table. In some situations,you may need a callback when a message is sent out, you can use the follwing overload of the PublishAsync T method: 1 PublishAsync T ( string name , T object , string callBackName ) In this overload method, callbackName is the callback name of the subscription method,when the consumption-side finished processing messages,CAP will return the processed result and also call the specified subscription method","title":"Publish &amp; Send"},{"location":"user-guide/api-interface/#transactions","text":"Transaction plays a very import role in CAP, It is a main factor to ensure the reliability of messaging. In the process of sending a message to the message queue without transaction we can not ensure that messages are sent to the message queue successfully after we finish dealing the business logic,or messages are send to the message queque successfully but our bussiness logic is failed. There is a variety of reasons that causing failure,eg:connection errors,network errors,etc. Note Only by putting the business logic and logic in the Publish of CAP in the same transaction so that we can enssure both them to be success or fail The following two blocks of code snippet demonstrate how to use transactions in EntityFramework and dapper when publishing messages.","title":"Transactions"},{"location":"user-guide/api-interface/#entityframework","text":"1 2 3 4 5 6 7 8 using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false ) { // Your business logic\u3002 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); trans . Commit (); } When you set the autoCommit : false , you can put your business logic before or after the Publish logic,the only thing you need to do is to ensure that they are in the same transaction. If you set the autoCommit : true , you need publish message _capBus.Publish at the last. During the course,the message content will be serialized as json and stored in the message table.","title":"EntityFramework"},{"location":"user-guide/api-interface/#dapper","text":"1 2 3 4 5 6 7 8 9 10 11 12 using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( insert into test(name) values( test ) , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( sample.rabbitmq.mysql , DateTime . Now ); transaction . Commit (); } }","title":"Dapper"},{"location":"user-guide/api-interface/#subscribe-consume","text":"Warning The businsess logics in the subscription side should be keep idempotent. You can view more details in this ISSUE . Use CapSubscribe[ ] to decorate a method so that it can subscribe messages published by CAP. 1 2 3 4 [CapSubscribe( xxx.services.bar )] public void BarMessageProcessor () { } You can also use multiple CapSubscribe[ ] to decorate a method so that you can subscribe messages from different sources accordingly. 1 2 3 4 5 [CapSubscribe( xxx.services.bar )] [CapSubscribe( xxx.services.foo )] public void BarAndFooMessageProcessor () { } xxx.services.bar is the name of the message to be subscribed.And it has different name in different message queque Clients.for example,in kafka the name is called Topic Name and in RAbbitMQ it is called RouteKey. In RabbitMQ you can use regular expression in RouteKey: * (Asterisk) stands for a single word. # (hash sign) standards for zero or more words. See the following picture(P for Publisher,X for Exchange,C for consumer and Q for Queue) In this example, we're going to send messages which all describe animals. The messages will be sent with a routing key that consists of three words (two dots). The first word in the routing key will describe a celerity, second a colour and third a species: \" . . \". We created three bindings: Q1 is bound with binding key \" .orange. \" and Q2 with \" . .rabbit\" and \"lazy.#\". These bindings can be summarised as: Q1 is interested in all the orange animals.Q2 wants to hear everything about rabbits, and everything about lazy animals.A message with a routing key set to \"quick.orange.rabbit\" will be delivered to both queues. Message \"lazy.orange.elephant\" also will go to both of them. On the other hand \"quick.orange.fox\" will only go to the first queue, and \"lazy.brown.fox\" only to the second. \"lazy.pink.rabbit\" will be delivered to the second queue only once, even though it matches two bindings. \"quick.brown.fox\" doesn't match any binding so it will be discarded. What happens if we break our contract and send a message with one or four words, like \"orange\" or \"quick.orange.male.rabbit\"? Well, these messages won't match any bindings and will be lost. On the other hand \"lazy.orange.male.rabbit\", even though it has four words, will match the last binding and will be delivered to the second queue. In CAP, we called a method decorated by CapSubscribe[] a subscriber , you can group different subscribers. Group is a collection of subscribers,each group can have one or multiple consumers,but a subscriber can only belongs to a certain group(you can not put a subscriber into multiple groups).Messages subscribed by members in a certain group can only be consumed once. If you do not specify any group when subscribing,CAP will put the subscriber into a default group named cap.default.group the following is a demo shows how to use group when subscribing. 1 2 3 4 5 [CapSubscribe( xxx.services.foo , Group = moduleA )] public void FooMessageProcessor () { }","title":"Subscribe &amp; Consume"},{"location":"user-guide/api-interface/#exceptional-case","text":"The following situations you shoud be aware of. \u2460 the subscription side has not started yet when publishing a message","title":"Exceptional case"},{"location":"user-guide/api-interface/#kafka","text":"In Kafka,published messages stored in the Persistent log files,so messages will not lost.when the subscription side started,it can still consume the message.","title":"Kafka"},{"location":"user-guide/api-interface/#rabbitmq","text":"In RabbitMQ, the application will create Persistent Exchange and Queue at the first start , CAP will create a new consumer queue for each consumer group, because the application started but the subscription side hasn's start yet so there has no queue,thus the message can not be persited,and the published messages will lost There are two ways to solve this message lost issue in RamitMQ: Before the deployment of your application,you can create durable Exchange and Queue in RabbitMQ by hand,the default names them are (cap.default.topic, cap.default.group). Run all instances in advance to ensure that both Exchange and Queue are initialized. It is highly recommanded that users adopt the second way,because it is easier to achieve.","title":"RabbitMQ"},{"location":"user-guide/configuration/","text":"Configuration CAP uses Microsoft.Extensions.DependencyInjection for configuration injection. CAP Configs You can use the following methods to configure some configuration items in the CAP, for example: 1 2 3 services.AddCap(capOptions = { capOptions.FailedCallback = //... }); CapOptions provides the following configuration items:\uff1a NAME DESCRIPTION TYPE DEFAULT DefaultGroup Default consumer group to which the subscriber belongs string cap.queue+{assembly name} SuccessedMessageExpiredAfter Expiration date after successful message was deleted int 3600 seconds FailedCallback Callback function when the failed message is executed. See below for details Action NULL FailedRetryInterval Failed Retry Interval int 60 seconds FailedRetryCount Failed RetryCount int 50 th CapOptions provides a callback function for FailedCallback to handle failed messages. When the message fails to be sent multiple times, the CAP will mark the message state as Failed . The CAP has a special handler to handle this failed message. The failed message will be put back into the queue and sent to MQ. Prior to this, if FailedCallback has a value, this callback function will be called first to tell the client. The type of FailedCallback is Action MessageType,string,string . The first parameter is the message type (send or receive), the second parameter is the name of the message, and the third parameter is the content of the message. RabbitMQ Configs The CAP uses the CapOptions extension to implement the RabbitMQ configuration function. Therefore, the configuration of the RabbitMQ is used as follows: 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseRabbitMQ(rabbitMQOption= { // rabbitmq options. }); }); RabbitMQOptions provides related RabbitMQ configuration: NAME DESCRIPTION TYPE DEFAULT HostName Host Address string localhost UserName username string guest Password Password string guest VirtualHost Virtual Host string / Port Port number int -1 TopicExchangeName CAP Default Exchange Name string cap.default.topic RequestedConnectionTimeout RabbitMQ Connection Timeout int 30,000 milliseconds SocketReadTimeout RabbitMQ message read timeout int 30,000 milliseconds SocketWriteTimeout RabbitMQ message write timeout int 30,000 milliseconds QueueMessageExpires Automatic deletion of messages in queue int (10 days) ms Kafka Configs CAP adopts Kafka's configuration function to expand CapOptions, so the configuration usage for Kafka is as follows: 1 2 3 4 5 6 services.AddCap(capOptions = { capOptions.UseKafka(kafkaOption= { // kafka options. // kafkaOptions.MainConfig.Add( , ); }); }); KafkaOptions provides Kafka-related configurations. Because Kafka has more configurations, the MainConfig dictionary provided here is used to support custom configurations. You can check here to get support information for configuration items. https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md EntityFramework Configs If you are using Entityframework as a message persistence store, then you can customize some configuration when configuring the CAP EntityFramework configuration item. 1 2 3 4 5 6 7 services.AddCap(x = { x.UseEntityFramework AppDbContext (efOption = { // entityframework options. }); }); Note that if you use the UseEntityFramework configuration item, then you do not need to reconfigure the following sections for several different database configurations. The CAP will automatically read the database configuration information used in DbContext. NAME DESCRIPTION TYPE DEFAULT Schema Cap table schema string Cap (SQL Server) Schema Cap table schema string cap (PostgreSql) TableNamePrefix Cap table name prefix string cap (MySql) SqlServer Configs Note that if you are using EntityFramewrok, you do not use this configuration item. CAP adopts the configuration function of SqlServer for extending CapOptions. Therefore, the configuration usage of SqlServer is as follows: 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseSqlServer(sqlserverOptions = { // sqlserverOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap Table Schema string Cap ConnectionString Database connection string string null MySql Configs Note that if you are using EntityFramewrok, you do not use this configuration item. CAP uses the configuration function for MySql that extends for CapOptions, so the configuration usage for MySql is as follows: 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseMySql(mysqlOptions = { // mysqlOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT TableNamePrefix Cap table name prefix string cap ConnectionString Database connection string string null PostgreSql Configs Note that if you are using EntityFramewrok, you do not use this configuration item. CAP uses PostgreSql configuration functions for CapOptions extensions, so the configuration usage for PostgreSql is as follows: 1 2 3 4 5 services . AddCap ( capOptions = { capOptions . UsePostgreSql ( postgreOptions = { // postgreOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap table name prefix string cap ConnectionString Database connection string string null","title":"Configuration"},{"location":"user-guide/configuration/#configuration","text":"CAP uses Microsoft.Extensions.DependencyInjection for configuration injection.","title":"Configuration"},{"location":"user-guide/configuration/#cap-configs","text":"You can use the following methods to configure some configuration items in the CAP, for example: 1 2 3 services.AddCap(capOptions = { capOptions.FailedCallback = //... }); CapOptions provides the following configuration items:\uff1a NAME DESCRIPTION TYPE DEFAULT DefaultGroup Default consumer group to which the subscriber belongs string cap.queue+{assembly name} SuccessedMessageExpiredAfter Expiration date after successful message was deleted int 3600 seconds FailedCallback Callback function when the failed message is executed. See below for details Action NULL FailedRetryInterval Failed Retry Interval int 60 seconds FailedRetryCount Failed RetryCount int 50 th CapOptions provides a callback function for FailedCallback to handle failed messages. When the message fails to be sent multiple times, the CAP will mark the message state as Failed . The CAP has a special handler to handle this failed message. The failed message will be put back into the queue and sent to MQ. Prior to this, if FailedCallback has a value, this callback function will be called first to tell the client. The type of FailedCallback is Action MessageType,string,string . The first parameter is the message type (send or receive), the second parameter is the name of the message, and the third parameter is the content of the message.","title":"CAP Configs"},{"location":"user-guide/configuration/#rabbitmq-configs","text":"The CAP uses the CapOptions extension to implement the RabbitMQ configuration function. Therefore, the configuration of the RabbitMQ is used as follows: 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseRabbitMQ(rabbitMQOption= { // rabbitmq options. }); }); RabbitMQOptions provides related RabbitMQ configuration: NAME DESCRIPTION TYPE DEFAULT HostName Host Address string localhost UserName username string guest Password Password string guest VirtualHost Virtual Host string / Port Port number int -1 TopicExchangeName CAP Default Exchange Name string cap.default.topic RequestedConnectionTimeout RabbitMQ Connection Timeout int 30,000 milliseconds SocketReadTimeout RabbitMQ message read timeout int 30,000 milliseconds SocketWriteTimeout RabbitMQ message write timeout int 30,000 milliseconds QueueMessageExpires Automatic deletion of messages in queue int (10 days) ms","title":"RabbitMQ Configs"},{"location":"user-guide/configuration/#kafka-configs","text":"CAP adopts Kafka's configuration function to expand CapOptions, so the configuration usage for Kafka is as follows: 1 2 3 4 5 6 services.AddCap(capOptions = { capOptions.UseKafka(kafkaOption= { // kafka options. // kafkaOptions.MainConfig.Add( , ); }); }); KafkaOptions provides Kafka-related configurations. Because Kafka has more configurations, the MainConfig dictionary provided here is used to support custom configurations. You can check here to get support information for configuration items. https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md","title":"Kafka Configs"},{"location":"user-guide/configuration/#entityframework-configs","text":"If you are using Entityframework as a message persistence store, then you can customize some configuration when configuring the CAP EntityFramework configuration item. 1 2 3 4 5 6 7 services.AddCap(x = { x.UseEntityFramework AppDbContext (efOption = { // entityframework options. }); }); Note that if you use the UseEntityFramework configuration item, then you do not need to reconfigure the following sections for several different database configurations. The CAP will automatically read the database configuration information used in DbContext. NAME DESCRIPTION TYPE DEFAULT Schema Cap table schema string Cap (SQL Server) Schema Cap table schema string cap (PostgreSql) TableNamePrefix Cap table name prefix string cap (MySql)","title":"EntityFramework Configs"},{"location":"user-guide/configuration/#sqlserver-configs","text":"Note that if you are using EntityFramewrok, you do not use this configuration item. CAP adopts the configuration function of SqlServer for extending CapOptions. Therefore, the configuration usage of SqlServer is as follows: 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseSqlServer(sqlserverOptions = { // sqlserverOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap Table Schema string Cap ConnectionString Database connection string string null","title":"SqlServer Configs"},{"location":"user-guide/configuration/#mysql-configs","text":"Note that if you are using EntityFramewrok, you do not use this configuration item. CAP uses the configuration function for MySql that extends for CapOptions, so the configuration usage for MySql is as follows: 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseMySql(mysqlOptions = { // mysqlOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT TableNamePrefix Cap table name prefix string cap ConnectionString Database connection string string null","title":"MySql Configs"},{"location":"user-guide/configuration/#postgresql-configs","text":"Note that if you are using EntityFramewrok, you do not use this configuration item. CAP uses PostgreSql configuration functions for CapOptions extensions, so the configuration usage for PostgreSql is as follows: 1 2 3 4 5 services . AddCap ( capOptions = { capOptions . UsePostgreSql ( postgreOptions = { // postgreOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap table name prefix string cap ConnectionString Database connection string string null","title":"PostgreSql Configs"},{"location":"user-guide/design/","text":"Design Motivation With the popularity of microservices architecture, more and more people are trying to use microservices to architect their systems. In this we encounter problems such as distributed transactions. To solve these problems, I did not find simplicity and Easy to use solution, so I decided to create such a library to solve this problem. The original CAP was to solve the transaction problems in the distributed system. She used asynchronous to ensure that this weak consistency transaction mechanism achieved the eventual consistency of the distributed transaction. For more information, see section 6. Now in addition to solving distributed transaction problems, CAP's other important function is to use it as an EventBus. It has all of the features of EventBus and provides a more simplified way to handle publish/subscribe in EventBus. Persistence The CAP relies on the local database for persistence of messages. The CAP uses this method to deal with situations in which all messages are lost due to environmental or network anomalies. The reliability of messages is the cornerstone of distributed transactions, so messages cannot be lost under any circumstances. There are two types of persistence for messages: 1 Persistence before the message enters the message queue Before the message enters the message queue, the CAP uses the local database table to persist the message. This ensures that the message is not lost when the message queue is abnormal or the network error occurs. In order to ensure the reliability of this mechanism, CAP uses database transactions with the same business code to ensure that business operations and CAP messages are strongly consistent throughout the persistence process. That is to say, in the process of message persistence, the database of any abnormal situation will be rolled back. 2 Persistence after messages enter the message queue After the message enters the message queue, the CAP starts the persistence function of the message queue. We need to explain how the message of the CAP in RabbitMQ and Kafka is persistent. For message persistence in RabbitMQ, CAP uses a consumer queue with message persistence, but there may be exceptions to this and take part in 2.2.1. Since Kafka is inherently designed to persist messages using files, Kafka ensures that messages are correctly persisted without loss after the message enters Kafka. Communication Data Streams The flow of messages in the CAP is roughly as follows: 2.2 version before \"P\" represents the sender of the message (producer). \"C\" stands for message consumer (subscriber). After version 2.2 In the 2.2 and later versions, we adjusted the flow of some messages. We removed the Queue table in the database and used the memory queue instead. For details, see: Improve the implementation mechanism of queue mode Consistency The CAP uses the ultimate consistency as a consistent solution. This solution follows the CAP theory. The following is the description of the CAP theory. C (consistent) consistency refers to the atomicity of data. It is guaranteed by transactions in a classic database. When a transaction completes, the data will be in a consistent state regardless of success or rollback. In a distributed environment, consistency is Indicates whether the data of multiple nodes is consistent; A (availability) service is always available, when the user sends a request, the service can return the result within a certain time; P (Partition Tolerance) In distributed applications, the system may not operate due to some distributed reasons. The good partition tolerance makes the application a distributed system but it seems to be a functioning whole. According to \"CAP\" distributed theory , in a distributed system, we often reluctantly give up strong consensus support for availability and partition fault tolerance, and instead pursue Ultimate consistency. In most business scenarios, we can accept short-term inconsistencies. Section 6 will introduce this further.","title":"Design Principle"},{"location":"user-guide/design/#design","text":"","title":"Design"},{"location":"user-guide/design/#motivation","text":"With the popularity of microservices architecture, more and more people are trying to use microservices to architect their systems. In this we encounter problems such as distributed transactions. To solve these problems, I did not find simplicity and Easy to use solution, so I decided to create such a library to solve this problem. The original CAP was to solve the transaction problems in the distributed system. She used asynchronous to ensure that this weak consistency transaction mechanism achieved the eventual consistency of the distributed transaction. For more information, see section 6. Now in addition to solving distributed transaction problems, CAP's other important function is to use it as an EventBus. It has all of the features of EventBus and provides a more simplified way to handle publish/subscribe in EventBus.","title":"Motivation"},{"location":"user-guide/design/#persistence","text":"The CAP relies on the local database for persistence of messages. The CAP uses this method to deal with situations in which all messages are lost due to environmental or network anomalies. The reliability of messages is the cornerstone of distributed transactions, so messages cannot be lost under any circumstances. There are two types of persistence for messages: 1 Persistence before the message enters the message queue Before the message enters the message queue, the CAP uses the local database table to persist the message. This ensures that the message is not lost when the message queue is abnormal or the network error occurs. In order to ensure the reliability of this mechanism, CAP uses database transactions with the same business code to ensure that business operations and CAP messages are strongly consistent throughout the persistence process. That is to say, in the process of message persistence, the database of any abnormal situation will be rolled back. 2 Persistence after messages enter the message queue After the message enters the message queue, the CAP starts the persistence function of the message queue. We need to explain how the message of the CAP in RabbitMQ and Kafka is persistent. For message persistence in RabbitMQ, CAP uses a consumer queue with message persistence, but there may be exceptions to this and take part in 2.2.1. Since Kafka is inherently designed to persist messages using files, Kafka ensures that messages are correctly persisted without loss after the message enters Kafka.","title":"Persistence"},{"location":"user-guide/design/#communication-data-streams","text":"The flow of messages in the CAP is roughly as follows: 2.2 version before \"P\" represents the sender of the message (producer). \"C\" stands for message consumer (subscriber). After version 2.2 In the 2.2 and later versions, we adjusted the flow of some messages. We removed the Queue table in the database and used the memory queue instead. For details, see: Improve the implementation mechanism of queue mode","title":"Communication Data Streams"},{"location":"user-guide/design/#consistency","text":"The CAP uses the ultimate consistency as a consistent solution. This solution follows the CAP theory. The following is the description of the CAP theory. C (consistent) consistency refers to the atomicity of data. It is guaranteed by transactions in a classic database. When a transaction completes, the data will be in a consistent state regardless of success or rollback. In a distributed environment, consistency is Indicates whether the data of multiple nodes is consistent; A (availability) service is always available, when the user sends a request, the service can return the result within a certain time; P (Partition Tolerance) In distributed applications, the system may not operate due to some distributed reasons. The good partition tolerance makes the application a distributed system but it seems to be a functioning whole. According to \"CAP\" distributed theory , in a distributed system, we often reluctantly give up strong consensus support for availability and partition fault tolerance, and instead pursue Ultimate consistency. In most business scenarios, we can accept short-term inconsistencies. Section 6 will introduce this further.","title":"Consistency"},{"location":"user-guide/faq/","text":"FAQ Any IM group(e.g Tencent QQ group) to learn and chat about CAP? None for that. Better than wasting much time in IM group, I hope developers could be capable of independent thinking more, and solve problems yourselves with referenced documents, even create issues or send emails when errors are remaining present. Does it require certain different databases, one each for productor and resumer in CAP? Not requird differences necessary, a given advice is that using a special database for each program. Otherwise, look at Q A below. How to use the same database for different applications? defining a prefix name of table in ConfigureServices method\u3002 codes exsample\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x = { x . UseKafka ( ); x . UseMySql ( opt = { opt . ConnectionString = connection string ; opt . TableNamePrefix = appone ; // different table name prefix here }); }); } Can CAP not use the database as event storage? I just want to sent the message Not yet. The purpose of CAP is that ensure consistency principle right in microservice or SOA architechtrues. The solution is based on ACID features of database, there is no sense about a single client wapper of message queue without database. If the consumer is abnormal, can I roll back the database executed sql that the producer has executed? Can't roll back, CAP is the ultimate consistency solution. You can imagine your scenario is to call a third party payment. If you are doing a third-party payment operation, after calling Alipay's interface successfully, and your own code is wrong, will Alipay roll back? If you don't roll back, what should you do? The same is true here.","title":"FAQ"},{"location":"user-guide/faq/#faq","text":"Any IM group(e.g Tencent QQ group) to learn and chat about CAP? None for that. Better than wasting much time in IM group, I hope developers could be capable of independent thinking more, and solve problems yourselves with referenced documents, even create issues or send emails when errors are remaining present. Does it require certain different databases, one each for productor and resumer in CAP? Not requird differences necessary, a given advice is that using a special database for each program. Otherwise, look at Q A below. How to use the same database for different applications? defining a prefix name of table in ConfigureServices method\u3002 codes exsample\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x = { x . UseKafka ( ); x . UseMySql ( opt = { opt . ConnectionString = connection string ; opt . TableNamePrefix = appone ; // different table name prefix here }); }); } Can CAP not use the database as event storage? I just want to sent the message Not yet. The purpose of CAP is that ensure consistency principle right in microservice or SOA architechtrues. The solution is based on ACID features of database, there is no sense about a single client wapper of message queue without database. If the consumer is abnormal, can I roll back the database executed sql that the producer has executed? Can't roll back, CAP is the ultimate consistency solution. You can imagine your scenario is to call a third party payment. If you are doing a third-party payment operation, after calling Alipay's interface successfully, and your own code is wrong, will Alipay roll back? If you don't roll back, what should you do? The same is true here.","title":"FAQ"},{"location":"user-guide/getting-started/","text":"Getting Stared Usage 1. Distributed transaction alternative solution in micro-service base on eventually consistency A distributed transaction is a very complex process with a lot of moving parts that can fail. Also, if these parts run on different machines or even in different data centers, the process of committing a transaction could become very long and unreliable. This could seriously affect the user experience and overall system bandwidth. So one of the best ways to solve the problem of distributed transactions is to avoid them completely. Usually, a microservice is designed in such way as to be independent and useful on its own. It should be able to solve some atomic business task. If we could split our system in such microservices, there\u2019s a good chance we wouldn\u2019t need to implement transactions between them at all. By far, one of the most feasible models of handling consistency across microservices is eventual consistency. This model doesn\u2019t enforce distributed ACID transactions across microservices. Instead, it proposes to use some mechanisms of ensuring that the system would be eventually consistent at some point in the future. CAP ia an alternative solution without transactions, it comply the eventually consistency and implement base on message queue. 2. EventBus with Outbox pattern CAP is an event bus that implements the Outbox pattern, Outbox is an infrastructure feature which simulates the reliability of distributed transactions without requiring use of the Distributed Transaction Coordinator(DTC). The outbox feature can be used instead of the DTC to mimic the same level of consistency without using distributed transactions. CAP implements the Outbox Pattern described in the eShop ebook Atomicity when publishing events to the event bus with a worker microservice Quick Start NuGet Package Use the following command to reference the CAP NuGet package: 1 PM Install-Package DotNetCore.CAP According to the different types of message queues used, different extension packages are introduced: 1 2 3 PM Install-Package DotNetCore.CAP.RabbitMQ PM Install-Package DotNetCore.CAP.Kafka PM Install-Package DotNetCore.CAP.AzureServiceBus According to the different types of databases used, different extension packages are introduced: 1 2 3 4 PM Install-Package DotNetCore.CAP.SqlServer PM Install-Package DotNetCore.CAP.MySql PM Install-Package DotNetCore.CAP.PostgreSql PM Install-Package DotNetCore.CAP.MongoDB Startup Configuration In an ASP.NET Core program, you can configure the services used by the CAP in the Startup.cs file ConfigureServices() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public void ConfigureServices ( IServiceCollection services ) { //...... services . AddDbContext AppDbContext (); //Options, If you are using EF as the ORM services . AddSingleton IMongoClient ( new MongoClient ( )); //Options, If you are using MongoDB services . AddCap ( x = { // If you are using EF, you need to add the configuration\uff1a //Options, Notice: You don t need to config x.UseSqlServer( ) again! CAP can autodiscovery. x . UseEntityFramework AppDbContext (); // If you are using Ado.Net, you need to add the configuration\uff1a x . UseSqlServer ( Your ConnectionStrings ); x . UseMySql ( Your ConnectionStrings ); x . UsePostgreSql ( Your ConnectionStrings ); // If you are using MongoDB, you need to add the configuration\uff1a x . UseMongoDB ( Your ConnectionStrings ); //MongoDB 4.0+ cluster // If you are using RabbitMQ, you need to add the configuration\uff1a x . UseRabbitMQ ( localhost ); // If you are using Kafka, you need to add the configuration\uff1a x . UseKafka ( localhost ); }); } Usage Publish Inject ICapPublisher in your Controller, then use the ICapPublisher to send message 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class PublishController : Controller { private readonly ICapPublisher _capBus ; public PublishController ( ICapPublisher capPublisher ) { _capBus = capPublisher ; } [Route( ~/adonet/transaction )] public IActionResult AdonetWithTransaction () { using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : true )) { //your business logic code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } } return Ok (); } [Route( ~/ef/transaction )] public IActionResult EntityFrameworkWithTransaction ([ FromServices ] AppDbContext dbContext ) { using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : true )) { //your business logic code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } return Ok (); } } Subscribe In Controller Action Add the Attribute [CapSubscribe()] on Action to subscribe message: 1 2 3 4 5 6 7 8 public class PublishController : Controller { [CapSubscribe( xxx.services.show.time )] public void CheckReceivedMessage ( DateTime datetime ) { Console . WriteLine ( datetime ); } } In Business Logic Service If your subscribe method is not in the Controller, the service class you need to Inheritance ICapSubscribe : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 namespace BusinessCode.Service { public interface ISubscriberService { public void CheckReceivedMessage ( DateTime datetime ); } public class SubscriberService : ISubscriberService , ICapSubscribe { [CapSubscribe( xxx.services.show.time )] public void CheckReceivedMessage ( DateTime datetime ) { } } } Then inject your ISubscriberService class in Startup.cs 1 2 3 4 5 6 7 8 9 10 public void ConfigureServices ( IServiceCollection services ) { //Note: The injection of services needs before of `services.AddCap()` services . AddTransient ISubscriberService , SubscriberService (); services . AddCap ( x = { //... }); }","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-stared","text":"","title":"Getting Stared"},{"location":"user-guide/getting-started/#usage","text":"","title":"Usage"},{"location":"user-guide/getting-started/#1-distributed-transaction-alternative-solution-in-micro-service-base-on-eventually-consistency","text":"A distributed transaction is a very complex process with a lot of moving parts that can fail. Also, if these parts run on different machines or even in different data centers, the process of committing a transaction could become very long and unreliable. This could seriously affect the user experience and overall system bandwidth. So one of the best ways to solve the problem of distributed transactions is to avoid them completely. Usually, a microservice is designed in such way as to be independent and useful on its own. It should be able to solve some atomic business task. If we could split our system in such microservices, there\u2019s a good chance we wouldn\u2019t need to implement transactions between them at all. By far, one of the most feasible models of handling consistency across microservices is eventual consistency. This model doesn\u2019t enforce distributed ACID transactions across microservices. Instead, it proposes to use some mechanisms of ensuring that the system would be eventually consistent at some point in the future. CAP ia an alternative solution without transactions, it comply the eventually consistency and implement base on message queue.","title":"1. Distributed transaction alternative solution in micro-service base on eventually consistency"},{"location":"user-guide/getting-started/#2-eventbus-with-outbox-pattern","text":"CAP is an event bus that implements the Outbox pattern, Outbox is an infrastructure feature which simulates the reliability of distributed transactions without requiring use of the Distributed Transaction Coordinator(DTC). The outbox feature can be used instead of the DTC to mimic the same level of consistency without using distributed transactions. CAP implements the Outbox Pattern described in the eShop ebook Atomicity when publishing events to the event bus with a worker microservice","title":"2. EventBus with Outbox pattern"},{"location":"user-guide/getting-started/#quick-start","text":"","title":"Quick Start"},{"location":"user-guide/getting-started/#nuget-package","text":"Use the following command to reference the CAP NuGet package: 1 PM Install-Package DotNetCore.CAP According to the different types of message queues used, different extension packages are introduced: 1 2 3 PM Install-Package DotNetCore.CAP.RabbitMQ PM Install-Package DotNetCore.CAP.Kafka PM Install-Package DotNetCore.CAP.AzureServiceBus According to the different types of databases used, different extension packages are introduced: 1 2 3 4 PM Install-Package DotNetCore.CAP.SqlServer PM Install-Package DotNetCore.CAP.MySql PM Install-Package DotNetCore.CAP.PostgreSql PM Install-Package DotNetCore.CAP.MongoDB","title":"NuGet Package"},{"location":"user-guide/getting-started/#startup-configuration","text":"In an ASP.NET Core program, you can configure the services used by the CAP in the Startup.cs file ConfigureServices() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public void ConfigureServices ( IServiceCollection services ) { //...... services . AddDbContext AppDbContext (); //Options, If you are using EF as the ORM services . AddSingleton IMongoClient ( new MongoClient ( )); //Options, If you are using MongoDB services . AddCap ( x = { // If you are using EF, you need to add the configuration\uff1a //Options, Notice: You don t need to config x.UseSqlServer( ) again! CAP can autodiscovery. x . UseEntityFramework AppDbContext (); // If you are using Ado.Net, you need to add the configuration\uff1a x . UseSqlServer ( Your ConnectionStrings ); x . UseMySql ( Your ConnectionStrings ); x . UsePostgreSql ( Your ConnectionStrings ); // If you are using MongoDB, you need to add the configuration\uff1a x . UseMongoDB ( Your ConnectionStrings ); //MongoDB 4.0+ cluster // If you are using RabbitMQ, you need to add the configuration\uff1a x . UseRabbitMQ ( localhost ); // If you are using Kafka, you need to add the configuration\uff1a x . UseKafka ( localhost ); }); }","title":"Startup Configuration"},{"location":"user-guide/getting-started/#usage_1","text":"","title":"Usage"},{"location":"user-guide/getting-started/#publish","text":"Inject ICapPublisher in your Controller, then use the ICapPublisher to send message 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class PublishController : Controller { private readonly ICapPublisher _capBus ; public PublishController ( ICapPublisher capPublisher ) { _capBus = capPublisher ; } [Route( ~/adonet/transaction )] public IActionResult AdonetWithTransaction () { using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : true )) { //your business logic code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } } return Ok (); } [Route( ~/ef/transaction )] public IActionResult EntityFrameworkWithTransaction ([ FromServices ] AppDbContext dbContext ) { using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : true )) { //your business logic code _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } return Ok (); } }","title":"Publish"},{"location":"user-guide/getting-started/#subscribe","text":"In Controller Action Add the Attribute [CapSubscribe()] on Action to subscribe message: 1 2 3 4 5 6 7 8 public class PublishController : Controller { [CapSubscribe( xxx.services.show.time )] public void CheckReceivedMessage ( DateTime datetime ) { Console . WriteLine ( datetime ); } } In Business Logic Service If your subscribe method is not in the Controller, the service class you need to Inheritance ICapSubscribe : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 namespace BusinessCode.Service { public interface ISubscriberService { public void CheckReceivedMessage ( DateTime datetime ); } public class SubscriberService : ISubscriberService , ICapSubscribe { [CapSubscribe( xxx.services.show.time )] public void CheckReceivedMessage ( DateTime datetime ) { } } } Then inject your ISubscriberService class in Startup.cs 1 2 3 4 5 6 7 8 9 10 public void ConfigureServices ( IServiceCollection services ) { //Note: The injection of services needs before of `services.AddCap()` services . AddTransient ISubscriberService , SubscriberService (); services . AddCap ( x = { //... }); }","title":"Subscribe"},{"location":"user-guide/implementation/","text":"IMPLEMENTATION Users can get a ICapPublisher interface from the ASP.NET Core DI container to publish a message .It is initialized by configurations in the ConfigureServices and configure method in the Startup.cs file,just like the way to initialize a MiddleWare in ASP.NET Core. Message Table After initialized, CAP will create two tables in the client side,they are Cap.Published and Cap.Received . Please noted that different databases may deal letter case differently,if you do not explicitly specify the Schema or the TableName Prefix before project startup,the default names are the ones mentioned above. Cap.Published \uff1aUsed to store messages(Published by the ICapPublisher service) that CAP published to the MQ(Message Queue)Client side Cap.Received :Used to Store messages(subscribed by the CapSubscribe[] ) subscribed by the MQ(message Queue) client side that CAP received. Before version 2.2 \uff1a Cap.Queue \uff1aA temporary table that CAP used to deal with published and received messages,under most circumstances(there aren't any errors),it is an empty table. Both Published and Received tables have a StatusName field,which is used to mark the status of the current message.Until now it has Scheduled \uff0c Successed and Failed statuses. Statuses before version 2.2\uff1a Scheduled \uff0c Enqueued \uff0c Processing \uff0c Successed and Failed . In the process of dealing with messages,CAP will change the status from Scheduled to Successed (or Failed ).if the final status is Successed ,it means that the message is sent to MQ successfully,and Failed means the message is failed to sent to MQ. Version later than 2.2, CAP will retry after 4 minutes if the status is Scheduled or Failed ,the retry interval is default to 60 seconds.You can change it by modify FailedRetryInterval in CapOptions . Before version 2.2,CAP retry 100 times for Failed messages by default. Message format CAP use JSON to transfer message,the following is CAP's messaging object model: NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Name string Content Content string Group Group a message belongs to string Added add time DateTime ExpiresAt expire time DateTime Retries retry times int StatusName Status Name string for Cap.Received ,there is an extra Group filed to mark which group the mesage belongs to. for the Content property CAP will use a Messsage object to wrap all the contents.The following shows details of the Message Object: NAME DESCRIPTION TYPE Id Generated by CAP string Timestamp message create time string Content content string CallbackName the subscriber which is used to call back string CAP use the same algorithms as MongoDB ObjectId's distributed Id generation algorithms. EventBus EventBus adopt the publish-subscribe messaging style to communicate with different components,and there is no need to register it in component explicitly. the diagram in the above link shows Eventbus's event flowchart,about EventBus,users can refer to other meterials to learn about it. We say that CAP implement all the features in Eventbus,EventBus has two features:publish and subscribe,In CAP we implement them in an elegant way.Besides,CAP also has two very robust feature,they are message persistence and messaging reliability under any circumstances,But EventBus don't have such features. In CAP,send a message can be regarded as an \"Event\",When CAP is used in an ASP.NET Core applicaiton,the application has the ablity to publish as well as receive messages. Retry Retry plays a very important role in CAP's infrastructure,CAP will retry for Failed messages.CAP has the following retry strategies: 1\u3001 Retry on sending in the process of sending a message,when the Broker crashed or connection failed or exceptions are thrown,CAP will retry,it will retry 3 times for the first time,if still failed,then it will retry every 1 minute,the retry the retry count +1,when the retry count come to 50,CAP will not retry any more. You can modify FailedRetryCount in CapOptions to change the default retry count. As metioned above,when the retry count comes to a certain number,CAP will not retry anymore,this time,you can find out the fail reason in the Dashboard and they deal with it manually. 2\u3001 Retry on Consuming When consumer received messages,specified method in the consumer will be executed,if exceptions are thrown during this course,CAP will retry,the retry strategy is the same as above Retry on sending . Data clean out table to store messages in database has an ExpiresAt field to mark the expiration time of the message. CAP will set ExpiresAt value as 1 hour for Successed messages and 15days for Failed messages. To avoid performance slow down caused by a large amount of data,CAP will delete expired data every hour by default,the deletion rule is that ExpiresAt field's value isn't null and samller than current time.That is, Failed messages(it has been retried 50 times by default),if you do not deal with it manually,will also be deleted after 15 days as well,you have to pay attention to it.","title":"Implementation Mechanisms"},{"location":"user-guide/implementation/#implementation","text":"Users can get a ICapPublisher interface from the ASP.NET Core DI container to publish a message .It is initialized by configurations in the ConfigureServices and configure method in the Startup.cs file,just like the way to initialize a MiddleWare in ASP.NET Core.","title":"IMPLEMENTATION"},{"location":"user-guide/implementation/#message-table","text":"After initialized, CAP will create two tables in the client side,they are Cap.Published and Cap.Received . Please noted that different databases may deal letter case differently,if you do not explicitly specify the Schema or the TableName Prefix before project startup,the default names are the ones mentioned above. Cap.Published \uff1aUsed to store messages(Published by the ICapPublisher service) that CAP published to the MQ(Message Queue)Client side Cap.Received :Used to Store messages(subscribed by the CapSubscribe[] ) subscribed by the MQ(message Queue) client side that CAP received. Before version 2.2 \uff1a Cap.Queue \uff1aA temporary table that CAP used to deal with published and received messages,under most circumstances(there aren't any errors),it is an empty table. Both Published and Received tables have a StatusName field,which is used to mark the status of the current message.Until now it has Scheduled \uff0c Successed and Failed statuses. Statuses before version 2.2\uff1a Scheduled \uff0c Enqueued \uff0c Processing \uff0c Successed and Failed . In the process of dealing with messages,CAP will change the status from Scheduled to Successed (or Failed ).if the final status is Successed ,it means that the message is sent to MQ successfully,and Failed means the message is failed to sent to MQ. Version later than 2.2, CAP will retry after 4 minutes if the status is Scheduled or Failed ,the retry interval is default to 60 seconds.You can change it by modify FailedRetryInterval in CapOptions . Before version 2.2,CAP retry 100 times for Failed messages by default.","title":"Message Table"},{"location":"user-guide/implementation/#message-format","text":"CAP use JSON to transfer message,the following is CAP's messaging object model: NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Name string Content Content string Group Group a message belongs to string Added add time DateTime ExpiresAt expire time DateTime Retries retry times int StatusName Status Name string for Cap.Received ,there is an extra Group filed to mark which group the mesage belongs to. for the Content property CAP will use a Messsage object to wrap all the contents.The following shows details of the Message Object: NAME DESCRIPTION TYPE Id Generated by CAP string Timestamp message create time string Content content string CallbackName the subscriber which is used to call back string CAP use the same algorithms as MongoDB ObjectId's distributed Id generation algorithms.","title":"Message format"},{"location":"user-guide/implementation/#eventbus","text":"EventBus adopt the publish-subscribe messaging style to communicate with different components,and there is no need to register it in component explicitly. the diagram in the above link shows Eventbus's event flowchart,about EventBus,users can refer to other meterials to learn about it. We say that CAP implement all the features in Eventbus,EventBus has two features:publish and subscribe,In CAP we implement them in an elegant way.Besides,CAP also has two very robust feature,they are message persistence and messaging reliability under any circumstances,But EventBus don't have such features. In CAP,send a message can be regarded as an \"Event\",When CAP is used in an ASP.NET Core applicaiton,the application has the ablity to publish as well as receive messages.","title":"EventBus"},{"location":"user-guide/implementation/#retry","text":"Retry plays a very important role in CAP's infrastructure,CAP will retry for Failed messages.CAP has the following retry strategies: 1\u3001 Retry on sending in the process of sending a message,when the Broker crashed or connection failed or exceptions are thrown,CAP will retry,it will retry 3 times for the first time,if still failed,then it will retry every 1 minute,the retry the retry count +1,when the retry count come to 50,CAP will not retry any more. You can modify FailedRetryCount in CapOptions to change the default retry count. As metioned above,when the retry count comes to a certain number,CAP will not retry anymore,this time,you can find out the fail reason in the Dashboard and they deal with it manually. 2\u3001 Retry on Consuming When consumer received messages,specified method in the consumer will be executed,if exceptions are thrown during this course,CAP will retry,the retry strategy is the same as above Retry on sending .","title":"Retry"},{"location":"user-guide/implementation/#data-clean-out","text":"table to store messages in database has an ExpiresAt field to mark the expiration time of the message. CAP will set ExpiresAt value as 1 hour for Successed messages and 15days for Failed messages. To avoid performance slow down caused by a large amount of data,CAP will delete expired data every hour by default,the deletion rule is that ExpiresAt field's value isn't null and samller than current time.That is, Failed messages(it has been retried 50 times by default),if you do not deal with it manually,will also be deleted after 15 days as well,you have to pay attention to it.","title":"Data clean out"},{"location":"user-guide/transaction/","text":"Transaction For the processing of distributed transactions, this CAP library matches the \"Asynchronous recovery events\" scenario. Asynchronous recovery events As known as the name \"native message table\", this is a classic solution, originally from EBay, and referenced links about it are at the end of this section. This is also one of the most popular solutions in the business development. Compared to TCC or 2pc/3pc, this solution is the simplest one for distributed transactions, and is decentralized. In TCC or 2PC solutions, the common transaction handlers synchronize the state among different services with a transaction coordinator, but it's not much required in this CAP solution. In addition, the deeper references of other conditions these services have, the more management complexity and stability risk may be increased in 2PC/TCC. Imagine that if we have 9 services committed successfully of all 10 whitch relied heavily, though the last one execute fail, should we roll back transactions of those 9 service? In fact, the cost is still very high. However, it's not mean that 2PC or TCC are at a disadvantage, each has its own suitability and matched scenarios, here won't introduce more. cn\uff1a base-an-acid-alternative en\uff1a Base: An Acid Alternative","title":"Distributed Transactions"},{"location":"user-guide/transaction/#transaction","text":"For the processing of distributed transactions, this CAP library matches the \"Asynchronous recovery events\" scenario.","title":"Transaction"},{"location":"user-guide/transaction/#asynchronous-recovery-events","text":"As known as the name \"native message table\", this is a classic solution, originally from EBay, and referenced links about it are at the end of this section. This is also one of the most popular solutions in the business development. Compared to TCC or 2pc/3pc, this solution is the simplest one for distributed transactions, and is decentralized. In TCC or 2PC solutions, the common transaction handlers synchronize the state among different services with a transaction coordinator, but it's not much required in this CAP solution. In addition, the deeper references of other conditions these services have, the more management complexity and stability risk may be increased in 2PC/TCC. Imagine that if we have 9 services committed successfully of all 10 whitch relied heavily, though the last one execute fail, should we roll back transactions of those 9 service? In fact, the cost is still very high. However, it's not mean that 2PC or TCC are at a disadvantage, each has its own suitability and matched scenarios, here won't introduce more. cn\uff1a base-an-acid-alternative en\uff1a Base: An Acid Alternative","title":"Asynchronous recovery events"},{"location":"user-guide-cn/api-interface/","text":"CAP \u7684 API \u63a5\u53e3\u53ea\u6709\u4e00\u4e2a\uff0c\u5c31\u662f ICapPublisher \u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u4ece DI \u5bb9\u5668\u4e2d\u83b7\u53d6\u5230\u8be5\u63a5\u53e3\u7684\u5b9e\u4f8b\u8fdb\u884c\u8c03\u7528\u3002 \u53d1\u5e03/\u53d1\u9001 \u4f60\u53ef\u4ee5\u4f7f\u7528 ICapPublisher \u63a5\u53e3\u4e2d\u7684 Publish T \u6216\u8005 PublishAsync T \u65b9\u6cd5\u6765\u53d1\u9001\u6d88\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 public class PublishController : Controller { private readonly ICapPublisher _capBus ; public PublishController ( ICapPublisher capPublisher ) { _capBus = capPublisher ; } //\u4e0d\u4f7f\u7528\u4e8b\u52a1 [Route( ~/without/transaction )] public IActionResult WithoutTransaction () { _capBus . Publish ( xxx.services.show.time , DateTime . Now ); return Ok (); } //Ado.Net \u4e2d\u4f7f\u7528\u4e8b\u52a1\uff0c\u81ea\u52a8\u63d0\u4ea4 [Route( ~/adonet/transaction )] public IActionResult AdonetWithTransaction () { using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : true )) { //\u4e1a\u52a1\u4ee3\u7801 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } } return Ok (); } //EntityFramework \u4e2d\u4f7f\u7528\u4e8b\u52a1\uff0c\u81ea\u52a8\u63d0\u4ea4 [Route( ~/ef/transaction )] public IActionResult EntityFrameworkWithTransaction ([ FromServices ] AppDbContext dbContext ) { using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : true )) { //\u4e1a\u52a1\u4ee3\u7801 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } return Ok (); } } \u4e0b\u9762\u662fPublishAsync\u8fd9\u4e2a\u63a5\u53e3\u7684\u7b7e\u540d\uff1a PublishAsync T (string name,T object) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u65f6\u5019 CAP \u5c06\u5728\u5185\u90e8\u521b\u5efa\u4e8b\u52a1\uff0c\u7136\u540e\u5c06\u6d88\u606f\u5199\u5165\u5230 Cap.Published \u8fd9\u4e2a\u6d88\u606f\u8868\u3002 \u6d88\u606f\u8865\u507f \u6709\u65f6\u5019\u5f53\u53d1\u9001\u4e00\u6761\u6d88\u606f\u51fa\u53bb\u4e4b\u540e\uff0c\u5e0c\u671b\u6709\u4e00\u4e2a\u56de\u8c03\u53ef\u4ee5\u83b7\u5f97\u6d88\u8d39\u65b9\u6cd5\u7684\u901a\u77e5\uff0c\u7528\u6765\u8865\u507f\u53d1\u9001\u65b9\u505a\u7684\u4e1a\u52a1\u64cd\u4f5c\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u4e2a\u91cd\u8f7d\u3002 PublishAsync T (string name,T object, string callBackName) \u8fd9\u4e2a\u91cd\u8f7d\u4e2d callbackName \u662f\u4e00\u4e2a\u56de\u8c03\u7684\u8ba2\u9605\u65b9\u6cd5\u540d\u79f0\uff0c\u5f53\u6d88\u8d39\u7aef\u5904\u7406\u5b8c\u6210\u6d88\u606f\u4e4b\u540eCAP\u4f1a\u628a\u6d88\u8d39\u8005\u7684\u5904\u7406\u7ed3\u679c\u8fd4\u56de\u5e76\u4e14\u8c03\u7528\u6307\u5b9a\u7684\u8ba2\u9605\u65b9\u6cd5\u3002 \u5728\u4e00\u4e9b\u9700\u8981\u4e1a\u52a1\u8865\u507f\u7684\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6b64\u7279\u6027\u8fdb\u884c\u4e00\u4e9b\u8fd8\u539f\u7684\u8865\u507f\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a\u7535\u5546\u7cfb\u7edf\u4e2d\u7684\u4ed8\u6b3e\u64cd\u4f5c\uff0c\u8ba2\u5355\u5728\u8fdb\u884c\u652f\u4ed8\u8c03\u7528\u652f\u4ed8\u670d\u52a1\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u90a3\u4e48\u652f\u4ed8\u670d\u52a1\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u6765\u544a\u8bc9\u8c03\u7528\u65b9\u6b64\u6b21\u4e1a\u52a1\u5931\u8d25\uff0c\u8c03\u7528\u65b9\u5c06\u652f\u4ed8\u72b6\u6001\u6807\u8bb0\u4e3a\u5931\u8d25\u3002 \u8c03\u7528\u65b9\u901a\u8fc7\u8ba2\u9605 callbackName (\u8ba2\u9605\u53c2\u6570\u4e3a\u6d88\u8d39\u65b9\u65b9\u6cd5\u7684\u8fd4\u56de\u503c) \u5373\u53ef\u63a5\u6536\u5230\u652f\u4ed8\u670d\u52a1\u6d88\u8d39\u8005\u65b9\u6cd5\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u4ece\u800c\u8fdb\u884c\u8865\u507f\u7684\u4e1a\u52a1\u5904\u7406\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // \u53d1\u9001\u65b9 _capBus . Publish ( xxx.services.show.time , DaateTime . Now , callback-show-execute-time ); [CapSubscribe( callback-show-execute-time )] //\u5bf9\u5e94\u53d1\u9001\u7684 callbackName public void ShowPublishTimeAndReturnExecuteTime ( DateTime time ) { Console . WriteLine ( time ); // \u8fd9\u662f\u8ba2\u9605\u65b9\u8fd4\u56de\u7684\u65f6\u95f4 } //-------------------------------------------------------------------------------- //\u8ba2\u9605\u65b9 [CapSubscribe( xxx.services.show.time )] public DateTime ShowPublishTimeAndReturnExecuteTime ( DateTime time ) { Console . WriteLine ( time ); // \u8fd9\u662f\u53d1\u9001\u7684\u65f6\u95f4 return DateTime . Now ; // \u8fd9\u662f\u6d88\u8d39\u8005\u8fd4\u56de\u7684\u65f6\u95f4\uff0cCAP\u4f1a\u53d6\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7528\u6765\u4f20\u9012\u5230\u53d1\u9001\u65b9\u7684\u56de\u8c03\u8ba2\u9605\u91cc\u9762 } \u4e8b\u52a1 \u4e8b\u52a1\u5728 CAP \u5177\u6709\u91cd\u8981\u4f5c\u7528\uff0c\u5b83\u662f\u4fdd\u8bc1\u6d88\u606f\u53ef\u9760\u6027\u7684\u4e00\u4e2a\u57fa\u77f3\u3002 \u5728\u53d1\u9001\u4e00\u6761\u6d88\u606f\u5230\u6d88\u606f\u961f\u5217\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u4e8b\u52a1\uff0c\u6211\u4eec\u662f\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1\u6211\u4eec\u7684\u4e1a\u52a1\u4ee3\u7801\u5728\u6267\u884c\u6210\u529f\u540e\u6d88\u606f\u5df2\u7ecf\u6210\u529f\u7684\u53d1\u9001\u5230\u4e86\u6d88\u606f\u961f\u5217\uff0c\u6216\u8005\u662f\u6d88\u606f\u6210\u529f\u7684\u53d1\u9001\u5230\u4e86\u6d88\u606f\u961f\u5217\uff0c\u4f46\u662f\u4e1a\u52a1\u4ee3\u7801\u786e\u6267\u884c\u5931\u8d25\u3002 \u8fd9\u91cc\u7684\u5931\u8d25\u539f\u56e0\u53ef\u80fd\u662f\u591a\u79cd\u591a\u6837\u7684\uff0c\u6bd4\u5982\u8fde\u63a5\u5f02\u5e38\uff0c\u7f51\u7edc\u6545\u969c\u7b49\u7b49\u3002 \u53ea\u6709\u4e1a\u52a1\u4ee3\u7801\u548cCAP\u7684Publish\u4ee3\u7801\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u624d\u80fd\u591f\u4fdd\u8bc1\u4e1a\u52a1\u4ee3\u7801\u548c\u6d88\u606f\u4ee3\u7801\u540c\u65f6\u6210\u529f\u6216\u8005\u5931\u8d25\u3002 \u4ee5\u4e0b\u662f\u4e24\u79cd\u4f7f\u7528\u4e8b\u52a1\u8fdb\u884cPublish\u7684\u4ee3\u7801\uff1a EntityFramework 1 2 3 4 5 6 7 8 using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false ) { //\u4e1a\u52a1\u4ee3\u7801 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); trans . Commit (); } \u5728\u4e0d\u4f7f\u7528\u81ea\u52a8\u63d0\u4ea4\u7684\u65f6\u5019\uff0c\u4f60\u7684\u4e1a\u52a1\u4ee3\u7801\u53ef\u4ee5\u4f4d\u4e8e Publish \u4e4b\u524d\u6216\u8005\u4e4b\u540e\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u3002 \u5f53\u4f7f\u7528\u81ea\u52a8\u63d0\u4ea4\u65f6\u5019\uff0c\u9700\u8981\u786e\u4fdd _capBus.Publish \u4f4d\u4e8e\u4ee3\u7801\u7684\u6700\u540e\u3002 \u5176\u4e2d\uff0c\u53d1\u9001\u7684\u5185\u5bb9\u4f1a\u5e8f\u5217\u5316\u4e3aJson\u5b58\u50a8\u5230\u6d88\u606f\u8868\u4e2d\u3002 Dapper 1 2 3 4 5 6 7 8 9 10 11 12 using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( insert into test(name) values( test ) , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( sample.rabbitmq.mysql , DateTime . Now ); transaction . Commit (); } } \u8ba2\u9605/\u6d88\u8d39 \u6ce8\u610f\uff1a\u6846\u67b6\u65e0\u6cd5\u505a\u5230100%\u786e\u4fdd\u6d88\u606f\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u6240\u4ee5\u5728\u4e00\u4e9b\u5173\u952e\u573a\u666f\u6d88\u606f\u7aef\u5728\u65b9\u6cd5\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\u81ea\u5df1\u4fdd\u8bc1\u5e42\u7b49\u6027\u3002 \u4f7f\u7528 CapSubscribeAttribute \u6765\u8ba2\u9605 CAP \u53d1\u5e03\u51fa\u53bb\u7684\u6d88\u606f\u3002 1 2 3 4 5 [CapSubscribe( xxx.services.bar )] public void BarMessageProcessor() { } \u8fd9\u91cc\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a CapSubscribe[ ] \u6765\u540c\u65f6\u8ba2\u9605\u591a\u4e2a\u4e0d\u540c\u7684\u6d88\u606f : 1 2 3 4 5 6 [CapSubscribe( xxx.services.bar )] [CapSubscribe( xxx.services.foo )] public void BarAndFooMessageProcessor() { } \u5176\u4e2d\uff0c xxx.services.bar \u4e3a\u8ba2\u9605\u7684\u6d88\u606f\u540d\u79f0\uff0c\u5185\u90e8\u5b9e\u73b0\u4e0a\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u4e0d\u540c\u7684\u6d88\u606f\u961f\u5217\u5177\u6709\u4e0d\u540c\u7684\u4ee3\u8868\u3002 \u5728 Kafka \u4e2d\uff0c\u8fd9\u4e2a\u540d\u79f0\u5373\u4e3a Topic Name\u3002 \u5728RabbitMQ \u4e2d\uff0c\u4e3a RouteKey\u3002 RabbitMQ \u4e2d\u7684 RouteKey \u652f\u6301\u7ed1\u5b9a\u952e\u8868\u8fbe\u5f0f\u5199\u6cd5\uff0c\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u7ed1\u5b9a\u952e\uff1a *\uff08\u661f\u53f7\uff09\u53ef\u4ee5\u4ee3\u66ff\u4e00\u4e2a\u5355\u8bcd. # (\u4e95\u53f7) \u53ef\u4ee5\u4ee3\u66ff0\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd. \u6bd4\u5982\u5728\u4e0b\u9762\u8fd9\u4e2a\u56fe\u4e2d(P\u4e3a\u53d1\u9001\u8005\uff0cX\u4e3aRabbitMQ\u4e2d\u7684Exchange\uff0cC\u4e3a\u6d88\u8d39\u8005\uff0cQ\u4e3a\u961f\u5217) \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u53d1\u9001\u4e00\u6761\u5173\u4e8e\u52a8\u7269\u63cf\u8ff0\u7684\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4 Name(routeKey) \u5b57\u6bb5\u4e2d\u7684\u5185\u5bb9\u5305\u542b 3 \u4e2a\u5355\u8bcd\u3002\u7b2c\u4e00\u4e2a\u5355\u8bcd\u662f\u63cf\u8ff0\u901f\u5ea6\u7684\uff08celerity\uff09\uff0c\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u662f\u63cf\u8ff0\u989c\u8272\u7684\uff08colour\uff09\uff0c\u7b2c\u4e09\u4e2a\u662f\u63cf\u8ff0\u54ea\u79cd\u52a8\u7269\u7684\uff08species\uff09\uff0c\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\u7c7b\u4f3c\uff1a\u201c . . \u201d\u3002 \u7136\u540e\u5728\u4f7f\u7528 CapSubscribe \u7ed1\u5b9a\u7684\u65f6\u5019\uff0cQ1\u7ed1\u5b9a\u4e3a CapSubscribe[ *.orange.* ] , Q2 \u7ed1\u5b9a\u4e3a CapSubscribe[ *.*.rabbit ] \u548c [CapSubscribe[ lazy.#] \u3002 \u90a3\u4e48\uff0c\u5f53\u53d1\u9001\u4e00\u4e2a\u540d\u4e3a \"quick.orange.rabbit\" \u6d88\u606f\u7684\u65f6\u5019\uff0c\u8fd9\u4e24\u4e2a\u961f\u5217\u5c06\u4f1a\u540c\u65f6\u6536\u5230\u8be5\u6d88\u606f\u3002\u540c\u6837\u540d\u4e3a lazy.orange.elephant \u7684\u6d88\u606f\u4e5f\u4f1a\u88ab\u540c\u65f6\u6536\u5230\u3002\u53e6\u5916\uff0c\u540d\u4e3a \"quick.orange.fox\" \u7684\u6d88\u606f\u5c06\u4ec5\u4f1a\u88ab\u53d1\u9001\u5230Q1\u961f\u5217\uff0c\u540d\u4e3a \"lazy.brown.fox\" \u7684\u6d88\u606f\u4ec5\u4f1a\u88ab\u53d1\u9001\u5230Q2\u3002\"lazy.pink.rabbit\" \u4ec5\u4f1a\u88ab\u53d1\u9001\u5230Q2\u4e00\u6b21\uff0c\u5373\u4f7f\u5b83\u88ab\u7ed1\u5b9a\u4e862\u6b21\u3002\"quick.brown.fox\" \u6ca1\u6709\u5339\u914d\u5230\u4efb\u4f55\u7ed1\u5b9a\u7684\u961f\u5217\uff0c\u6240\u4ee5\u5b83\u5c06\u4f1a\u88ab\u4e22\u5f03\u3002 \u53e6\u5916\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u4f60\u8fdd\u53cd\u7ea6\u5b9a\uff0c\u6bd4\u5982\u4f7f\u7528 4\u4e2a\u5355\u8bcd\u8fdb\u884c\u7ec4\u5408\uff0c\u4f8b\u5982 \"quick.orange.male.rabbit\"\uff0c\u90a3\u4e48\u5b83\u5c06\u5339\u914d\u4e0d\u5230\u4efb\u4f55\u7684\u961f\u5217\uff0c\u6d88\u606f\u5c06\u4f1a\u88ab\u4e22\u5f03\u3002 \u4f46\u662f\uff0c\u5047\u5982\u4f60\u7684\u6d88\u606f\u540d\u4e3a \"lazy.orange.male.rabbit\"\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c06\u4f1a\u88ab\u53d1\u9001\u5230Q2\uff0c\u56e0\u4e3a #\uff08\u4e95\u53f7\uff09\u53ef\u4ee5\u5339\u914d 0 \u6216\u8005\u591a\u4e2a\u5355\u8bcd\u3002 \u5728 CAP \u4e2d\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u62e5\u6709 CapSubscribe[] \u6807\u8bb0\u7684\u65b9\u6cd5\u53eb\u505a**\u8ba2\u9605\u8005**\uff0c\u4f60\u53ef\u4ee5\u628a\u8ba2\u9605\u8005\u8fdb\u884c\u5206\u7ec4\u3002 \u7ec4(Group) \uff0c\u662f\u8ba2\u9605\u8005\u7684\u4e00\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e00\u7ec4\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u6d88\u8d39\u8005\uff0c\u4f46\u662f\u4e00\u4e2a\u8ba2\u9605\u8005\u53ea\u80fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u7ec4\u3002\u540c\u4e00\u4e2a\u7ec4\u5185\u7684\u8ba2\u9605\u8005\u8ba2\u9605\u7684\u6d88\u606f\u53ea\u80fd\u88ab\u6d88\u8d39\u4e00\u6b21\u3002 \u5982\u679c\u4f60\u5728\u8ba2\u9605\u7684\u65f6\u5019\u6ca1\u6709\u6307\u5b9a\u7ec4\uff0cCAP\u4f1a\u5c06\u8ba2\u9605\u8005\u8bbe\u7f6e\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7ec4\uff0c\u9ed8\u8ba4\u7684\u7ec4\u540d\u79f0\u4e3a cap.queue.{\u7a0b\u5e8f\u96c6\u540d\u79f0} \u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u7ec4\u8fdb\u884c\u8ba2\u9605\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 [CapSubscribe( xxx.services.foo , Group = moduleA )] public void FooMessageProcessor () { } \u4f8b\u5916\u60c5\u51b5 \u8fd9\u91cc\u6709\u51e0\u79cd\u60c5\u51b5\u53ef\u80fd\u9700\u8981\u77e5\u9053\uff1a \u2460 \u6d88\u606f\u53d1\u5e03\u7684\u65f6\u5019\u8ba2\u9605\u65b9\u8fd8\u672a\u542f\u52a8 Kafka: \u5f53 Kafka \u4e2d\uff0c\u53d1\u5e03\u7684\u6d88\u606f\u5b58\u50a8\u4e8e\u6301\u4e45\u5316\u7684\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u6d88\u606f\u4e0d\u4f1a\u4e22\u5931\uff0c\u5f53\u8ba2\u9605\u8005\u6240\u5728\u7684\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u6d88\u8d39\u6389\u8fd9\u4e9b\u6d88\u606f\u3002 RabbitMQ\uff1a \u5728 RabbitMQ \u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f**\u9996\u6b21\u542f\u52a8**\u4f1a\u521b\u5efa\u5177\u6709\u6301\u4e45\u5316\u7684 Exchange \u548c Queue\uff0cCAP \u4f1a\u9488\u5bf9\u6bcf\u4e00\u4e2a\u8ba2\u9605\u8005Group\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6d88\u8d39\u8005\u961f\u5217\uff0c \u7531\u4e8e\u9996\u6b21\u542f\u52a8\u65f6\u5019\u8ba2\u9605\u8005\u672a\u542f\u52a8\u7684\u6240\u4ee5\u662f\u6ca1\u6709\u961f\u5217\u7684\uff0c\u6d88\u606f\u65e0\u6cd5\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u8fd9\u4e2a\u65f6\u5019\u751f\u4ea7\u8005\u53d1\u7684\u6d88\u606f\u4f1a\u4e22\u5931 \u3002 \u9488\u5bf9RabbitMQ\u7684\u6d88\u606f\u4e22\u5931\u7684\u95ee\u9898\uff0c\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f\uff1a i. \u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u5728RabbitMQ\u4e2d\u624b\u52a8\u521b\u5efa\u5177\u6709durable\u7279\u6027\u7684Exchange\u548cQueue\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4ed6\u4eec\u7684\u540d\u5b57\u5206\u522b\u662f(cap.default.topic, cap.default.group)\u3002 ii. \u63d0\u524d\u8fd0\u884c\u4e00\u904d\u6240\u6709\u5b9e\u4f8b\uff0c\u8ba9Exchange\u548cQueue\u521d\u59cb\u5316\u3002 \u6211\u4eec\u5efa\u8bae\u91c7\u7528\u7b2c ii \u79cd\u65b9\u6848\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u505a\u5230\u3002","title":"API \u63a5\u53e3"},{"location":"user-guide-cn/api-interface/#_1","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 ICapPublisher \u63a5\u53e3\u4e2d\u7684 Publish T \u6216\u8005 PublishAsync T \u65b9\u6cd5\u6765\u53d1\u9001\u6d88\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 public class PublishController : Controller { private readonly ICapPublisher _capBus ; public PublishController ( ICapPublisher capPublisher ) { _capBus = capPublisher ; } //\u4e0d\u4f7f\u7528\u4e8b\u52a1 [Route( ~/without/transaction )] public IActionResult WithoutTransaction () { _capBus . Publish ( xxx.services.show.time , DateTime . Now ); return Ok (); } //Ado.Net \u4e2d\u4f7f\u7528\u4e8b\u52a1\uff0c\u81ea\u52a8\u63d0\u4ea4 [Route( ~/adonet/transaction )] public IActionResult AdonetWithTransaction () { using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : true )) { //\u4e1a\u52a1\u4ee3\u7801 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } } return Ok (); } //EntityFramework \u4e2d\u4f7f\u7528\u4e8b\u52a1\uff0c\u81ea\u52a8\u63d0\u4ea4 [Route( ~/ef/transaction )] public IActionResult EntityFrameworkWithTransaction ([ FromServices ] AppDbContext dbContext ) { using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : true )) { //\u4e1a\u52a1\u4ee3\u7801 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); } return Ok (); } } \u4e0b\u9762\u662fPublishAsync\u8fd9\u4e2a\u63a5\u53e3\u7684\u7b7e\u540d\uff1a PublishAsync T (string name,T object) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u65f6\u5019 CAP \u5c06\u5728\u5185\u90e8\u521b\u5efa\u4e8b\u52a1\uff0c\u7136\u540e\u5c06\u6d88\u606f\u5199\u5165\u5230 Cap.Published \u8fd9\u4e2a\u6d88\u606f\u8868\u3002","title":"\u53d1\u5e03/\u53d1\u9001"},{"location":"user-guide-cn/api-interface/#_2","text":"\u6709\u65f6\u5019\u5f53\u53d1\u9001\u4e00\u6761\u6d88\u606f\u51fa\u53bb\u4e4b\u540e\uff0c\u5e0c\u671b\u6709\u4e00\u4e2a\u56de\u8c03\u53ef\u4ee5\u83b7\u5f97\u6d88\u8d39\u65b9\u6cd5\u7684\u901a\u77e5\uff0c\u7528\u6765\u8865\u507f\u53d1\u9001\u65b9\u505a\u7684\u4e1a\u52a1\u64cd\u4f5c\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8fd9\u4e2a\u91cd\u8f7d\u3002 PublishAsync T (string name,T object, string callBackName) \u8fd9\u4e2a\u91cd\u8f7d\u4e2d callbackName \u662f\u4e00\u4e2a\u56de\u8c03\u7684\u8ba2\u9605\u65b9\u6cd5\u540d\u79f0\uff0c\u5f53\u6d88\u8d39\u7aef\u5904\u7406\u5b8c\u6210\u6d88\u606f\u4e4b\u540eCAP\u4f1a\u628a\u6d88\u8d39\u8005\u7684\u5904\u7406\u7ed3\u679c\u8fd4\u56de\u5e76\u4e14\u8c03\u7528\u6307\u5b9a\u7684\u8ba2\u9605\u65b9\u6cd5\u3002 \u5728\u4e00\u4e9b\u9700\u8981\u4e1a\u52a1\u8865\u507f\u7684\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6b64\u7279\u6027\u8fdb\u884c\u4e00\u4e9b\u8fd8\u539f\u7684\u8865\u507f\u64cd\u4f5c\u3002\u4f8b\u5982\uff1a\u7535\u5546\u7cfb\u7edf\u4e2d\u7684\u4ed8\u6b3e\u64cd\u4f5c\uff0c\u8ba2\u5355\u5728\u8fdb\u884c\u652f\u4ed8\u8c03\u7528\u652f\u4ed8\u670d\u52a1\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u90a3\u4e48\u652f\u4ed8\u670d\u52a1\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u6765\u544a\u8bc9\u8c03\u7528\u65b9\u6b64\u6b21\u4e1a\u52a1\u5931\u8d25\uff0c\u8c03\u7528\u65b9\u5c06\u652f\u4ed8\u72b6\u6001\u6807\u8bb0\u4e3a\u5931\u8d25\u3002 \u8c03\u7528\u65b9\u901a\u8fc7\u8ba2\u9605 callbackName (\u8ba2\u9605\u53c2\u6570\u4e3a\u6d88\u8d39\u65b9\u65b9\u6cd5\u7684\u8fd4\u56de\u503c) \u5373\u53ef\u63a5\u6536\u5230\u652f\u4ed8\u670d\u52a1\u6d88\u8d39\u8005\u65b9\u6cd5\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u4ece\u800c\u8fdb\u884c\u8865\u507f\u7684\u4e1a\u52a1\u5904\u7406\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // \u53d1\u9001\u65b9 _capBus . Publish ( xxx.services.show.time , DaateTime . Now , callback-show-execute-time ); [CapSubscribe( callback-show-execute-time )] //\u5bf9\u5e94\u53d1\u9001\u7684 callbackName public void ShowPublishTimeAndReturnExecuteTime ( DateTime time ) { Console . WriteLine ( time ); // \u8fd9\u662f\u8ba2\u9605\u65b9\u8fd4\u56de\u7684\u65f6\u95f4 } //-------------------------------------------------------------------------------- //\u8ba2\u9605\u65b9 [CapSubscribe( xxx.services.show.time )] public DateTime ShowPublishTimeAndReturnExecuteTime ( DateTime time ) { Console . WriteLine ( time ); // \u8fd9\u662f\u53d1\u9001\u7684\u65f6\u95f4 return DateTime . Now ; // \u8fd9\u662f\u6d88\u8d39\u8005\u8fd4\u56de\u7684\u65f6\u95f4\uff0cCAP\u4f1a\u53d6\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7528\u6765\u4f20\u9012\u5230\u53d1\u9001\u65b9\u7684\u56de\u8c03\u8ba2\u9605\u91cc\u9762 }","title":"\u6d88\u606f\u8865\u507f"},{"location":"user-guide-cn/api-interface/#_3","text":"\u4e8b\u52a1\u5728 CAP \u5177\u6709\u91cd\u8981\u4f5c\u7528\uff0c\u5b83\u662f\u4fdd\u8bc1\u6d88\u606f\u53ef\u9760\u6027\u7684\u4e00\u4e2a\u57fa\u77f3\u3002 \u5728\u53d1\u9001\u4e00\u6761\u6d88\u606f\u5230\u6d88\u606f\u961f\u5217\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u4e8b\u52a1\uff0c\u6211\u4eec\u662f\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1\u6211\u4eec\u7684\u4e1a\u52a1\u4ee3\u7801\u5728\u6267\u884c\u6210\u529f\u540e\u6d88\u606f\u5df2\u7ecf\u6210\u529f\u7684\u53d1\u9001\u5230\u4e86\u6d88\u606f\u961f\u5217\uff0c\u6216\u8005\u662f\u6d88\u606f\u6210\u529f\u7684\u53d1\u9001\u5230\u4e86\u6d88\u606f\u961f\u5217\uff0c\u4f46\u662f\u4e1a\u52a1\u4ee3\u7801\u786e\u6267\u884c\u5931\u8d25\u3002 \u8fd9\u91cc\u7684\u5931\u8d25\u539f\u56e0\u53ef\u80fd\u662f\u591a\u79cd\u591a\u6837\u7684\uff0c\u6bd4\u5982\u8fde\u63a5\u5f02\u5e38\uff0c\u7f51\u7edc\u6545\u969c\u7b49\u7b49\u3002 \u53ea\u6709\u4e1a\u52a1\u4ee3\u7801\u548cCAP\u7684Publish\u4ee3\u7801\u5fc5\u987b\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\uff0c\u624d\u80fd\u591f\u4fdd\u8bc1\u4e1a\u52a1\u4ee3\u7801\u548c\u6d88\u606f\u4ee3\u7801\u540c\u65f6\u6210\u529f\u6216\u8005\u5931\u8d25\u3002 \u4ee5\u4e0b\u662f\u4e24\u79cd\u4f7f\u7528\u4e8b\u52a1\u8fdb\u884cPublish\u7684\u4ee3\u7801\uff1a EntityFramework 1 2 3 4 5 6 7 8 using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false ) { //\u4e1a\u52a1\u4ee3\u7801 _capBus . Publish ( xxx.services.show.time , DateTime . Now ); trans . Commit (); } \u5728\u4e0d\u4f7f\u7528\u81ea\u52a8\u63d0\u4ea4\u7684\u65f6\u5019\uff0c\u4f60\u7684\u4e1a\u52a1\u4ee3\u7801\u53ef\u4ee5\u4f4d\u4e8e Publish \u4e4b\u524d\u6216\u8005\u4e4b\u540e\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u3002 \u5f53\u4f7f\u7528\u81ea\u52a8\u63d0\u4ea4\u65f6\u5019\uff0c\u9700\u8981\u786e\u4fdd _capBus.Publish \u4f4d\u4e8e\u4ee3\u7801\u7684\u6700\u540e\u3002 \u5176\u4e2d\uff0c\u53d1\u9001\u7684\u5185\u5bb9\u4f1a\u5e8f\u5217\u5316\u4e3aJson\u5b58\u50a8\u5230\u6d88\u606f\u8868\u4e2d\u3002 Dapper 1 2 3 4 5 6 7 8 9 10 11 12 using ( var connection = new MySqlConnection ( ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( insert into test(name) values( test ) , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( sample.rabbitmq.mysql , DateTime . Now ); transaction . Commit (); } }","title":"\u4e8b\u52a1"},{"location":"user-guide-cn/api-interface/#_4","text":"\u6ce8\u610f\uff1a\u6846\u67b6\u65e0\u6cd5\u505a\u5230100%\u786e\u4fdd\u6d88\u606f\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u6240\u4ee5\u5728\u4e00\u4e9b\u5173\u952e\u573a\u666f\u6d88\u606f\u7aef\u5728\u65b9\u6cd5\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\u81ea\u5df1\u4fdd\u8bc1\u5e42\u7b49\u6027\u3002 \u4f7f\u7528 CapSubscribeAttribute \u6765\u8ba2\u9605 CAP \u53d1\u5e03\u51fa\u53bb\u7684\u6d88\u606f\u3002 1 2 3 4 5 [CapSubscribe( xxx.services.bar )] public void BarMessageProcessor() { } \u8fd9\u91cc\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a CapSubscribe[ ] \u6765\u540c\u65f6\u8ba2\u9605\u591a\u4e2a\u4e0d\u540c\u7684\u6d88\u606f : 1 2 3 4 5 6 [CapSubscribe( xxx.services.bar )] [CapSubscribe( xxx.services.foo )] public void BarAndFooMessageProcessor() { } \u5176\u4e2d\uff0c xxx.services.bar \u4e3a\u8ba2\u9605\u7684\u6d88\u606f\u540d\u79f0\uff0c\u5185\u90e8\u5b9e\u73b0\u4e0a\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u4e0d\u540c\u7684\u6d88\u606f\u961f\u5217\u5177\u6709\u4e0d\u540c\u7684\u4ee3\u8868\u3002 \u5728 Kafka \u4e2d\uff0c\u8fd9\u4e2a\u540d\u79f0\u5373\u4e3a Topic Name\u3002 \u5728RabbitMQ \u4e2d\uff0c\u4e3a RouteKey\u3002 RabbitMQ \u4e2d\u7684 RouteKey \u652f\u6301\u7ed1\u5b9a\u952e\u8868\u8fbe\u5f0f\u5199\u6cd5\uff0c\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u7ed1\u5b9a\u952e\uff1a *\uff08\u661f\u53f7\uff09\u53ef\u4ee5\u4ee3\u66ff\u4e00\u4e2a\u5355\u8bcd. # (\u4e95\u53f7) \u53ef\u4ee5\u4ee3\u66ff0\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd. \u6bd4\u5982\u5728\u4e0b\u9762\u8fd9\u4e2a\u56fe\u4e2d(P\u4e3a\u53d1\u9001\u8005\uff0cX\u4e3aRabbitMQ\u4e2d\u7684Exchange\uff0cC\u4e3a\u6d88\u8d39\u8005\uff0cQ\u4e3a\u961f\u5217) \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u53d1\u9001\u4e00\u6761\u5173\u4e8e\u52a8\u7269\u63cf\u8ff0\u7684\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4 Name(routeKey) \u5b57\u6bb5\u4e2d\u7684\u5185\u5bb9\u5305\u542b 3 \u4e2a\u5355\u8bcd\u3002\u7b2c\u4e00\u4e2a\u5355\u8bcd\u662f\u63cf\u8ff0\u901f\u5ea6\u7684\uff08celerity\uff09\uff0c\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u662f\u63cf\u8ff0\u989c\u8272\u7684\uff08colour\uff09\uff0c\u7b2c\u4e09\u4e2a\u662f\u63cf\u8ff0\u54ea\u79cd\u52a8\u7269\u7684\uff08species\uff09\uff0c\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\u7c7b\u4f3c\uff1a\u201c . . \u201d\u3002 \u7136\u540e\u5728\u4f7f\u7528 CapSubscribe \u7ed1\u5b9a\u7684\u65f6\u5019\uff0cQ1\u7ed1\u5b9a\u4e3a CapSubscribe[ *.orange.* ] , Q2 \u7ed1\u5b9a\u4e3a CapSubscribe[ *.*.rabbit ] \u548c [CapSubscribe[ lazy.#] \u3002 \u90a3\u4e48\uff0c\u5f53\u53d1\u9001\u4e00\u4e2a\u540d\u4e3a \"quick.orange.rabbit\" \u6d88\u606f\u7684\u65f6\u5019\uff0c\u8fd9\u4e24\u4e2a\u961f\u5217\u5c06\u4f1a\u540c\u65f6\u6536\u5230\u8be5\u6d88\u606f\u3002\u540c\u6837\u540d\u4e3a lazy.orange.elephant \u7684\u6d88\u606f\u4e5f\u4f1a\u88ab\u540c\u65f6\u6536\u5230\u3002\u53e6\u5916\uff0c\u540d\u4e3a \"quick.orange.fox\" \u7684\u6d88\u606f\u5c06\u4ec5\u4f1a\u88ab\u53d1\u9001\u5230Q1\u961f\u5217\uff0c\u540d\u4e3a \"lazy.brown.fox\" \u7684\u6d88\u606f\u4ec5\u4f1a\u88ab\u53d1\u9001\u5230Q2\u3002\"lazy.pink.rabbit\" \u4ec5\u4f1a\u88ab\u53d1\u9001\u5230Q2\u4e00\u6b21\uff0c\u5373\u4f7f\u5b83\u88ab\u7ed1\u5b9a\u4e862\u6b21\u3002\"quick.brown.fox\" \u6ca1\u6709\u5339\u914d\u5230\u4efb\u4f55\u7ed1\u5b9a\u7684\u961f\u5217\uff0c\u6240\u4ee5\u5b83\u5c06\u4f1a\u88ab\u4e22\u5f03\u3002 \u53e6\u5916\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u4f60\u8fdd\u53cd\u7ea6\u5b9a\uff0c\u6bd4\u5982\u4f7f\u7528 4\u4e2a\u5355\u8bcd\u8fdb\u884c\u7ec4\u5408\uff0c\u4f8b\u5982 \"quick.orange.male.rabbit\"\uff0c\u90a3\u4e48\u5b83\u5c06\u5339\u914d\u4e0d\u5230\u4efb\u4f55\u7684\u961f\u5217\uff0c\u6d88\u606f\u5c06\u4f1a\u88ab\u4e22\u5f03\u3002 \u4f46\u662f\uff0c\u5047\u5982\u4f60\u7684\u6d88\u606f\u540d\u4e3a \"lazy.orange.male.rabbit\"\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c06\u4f1a\u88ab\u53d1\u9001\u5230Q2\uff0c\u56e0\u4e3a #\uff08\u4e95\u53f7\uff09\u53ef\u4ee5\u5339\u914d 0 \u6216\u8005\u591a\u4e2a\u5355\u8bcd\u3002 \u5728 CAP \u4e2d\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u62e5\u6709 CapSubscribe[] \u6807\u8bb0\u7684\u65b9\u6cd5\u53eb\u505a**\u8ba2\u9605\u8005**\uff0c\u4f60\u53ef\u4ee5\u628a\u8ba2\u9605\u8005\u8fdb\u884c\u5206\u7ec4\u3002 \u7ec4(Group) \uff0c\u662f\u8ba2\u9605\u8005\u7684\u4e00\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e00\u7ec4\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u6d88\u8d39\u8005\uff0c\u4f46\u662f\u4e00\u4e2a\u8ba2\u9605\u8005\u53ea\u80fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u7ec4\u3002\u540c\u4e00\u4e2a\u7ec4\u5185\u7684\u8ba2\u9605\u8005\u8ba2\u9605\u7684\u6d88\u606f\u53ea\u80fd\u88ab\u6d88\u8d39\u4e00\u6b21\u3002 \u5982\u679c\u4f60\u5728\u8ba2\u9605\u7684\u65f6\u5019\u6ca1\u6709\u6307\u5b9a\u7ec4\uff0cCAP\u4f1a\u5c06\u8ba2\u9605\u8005\u8bbe\u7f6e\u5230\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7ec4\uff0c\u9ed8\u8ba4\u7684\u7ec4\u540d\u79f0\u4e3a cap.queue.{\u7a0b\u5e8f\u96c6\u540d\u79f0} \u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u7ec4\u8fdb\u884c\u8ba2\u9605\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 [CapSubscribe( xxx.services.foo , Group = moduleA )] public void FooMessageProcessor () { }","title":"\u8ba2\u9605/\u6d88\u8d39"},{"location":"user-guide-cn/api-interface/#_5","text":"\u8fd9\u91cc\u6709\u51e0\u79cd\u60c5\u51b5\u53ef\u80fd\u9700\u8981\u77e5\u9053\uff1a \u2460 \u6d88\u606f\u53d1\u5e03\u7684\u65f6\u5019\u8ba2\u9605\u65b9\u8fd8\u672a\u542f\u52a8 Kafka: \u5f53 Kafka \u4e2d\uff0c\u53d1\u5e03\u7684\u6d88\u606f\u5b58\u50a8\u4e8e\u6301\u4e45\u5316\u7684\u65e5\u5fd7\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u6d88\u606f\u4e0d\u4f1a\u4e22\u5931\uff0c\u5f53\u8ba2\u9605\u8005\u6240\u5728\u7684\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u6d88\u8d39\u6389\u8fd9\u4e9b\u6d88\u606f\u3002 RabbitMQ\uff1a \u5728 RabbitMQ \u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f**\u9996\u6b21\u542f\u52a8**\u4f1a\u521b\u5efa\u5177\u6709\u6301\u4e45\u5316\u7684 Exchange \u548c Queue\uff0cCAP \u4f1a\u9488\u5bf9\u6bcf\u4e00\u4e2a\u8ba2\u9605\u8005Group\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6d88\u8d39\u8005\u961f\u5217\uff0c \u7531\u4e8e\u9996\u6b21\u542f\u52a8\u65f6\u5019\u8ba2\u9605\u8005\u672a\u542f\u52a8\u7684\u6240\u4ee5\u662f\u6ca1\u6709\u961f\u5217\u7684\uff0c\u6d88\u606f\u65e0\u6cd5\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u8fd9\u4e2a\u65f6\u5019\u751f\u4ea7\u8005\u53d1\u7684\u6d88\u606f\u4f1a\u4e22\u5931 \u3002 \u9488\u5bf9RabbitMQ\u7684\u6d88\u606f\u4e22\u5931\u7684\u95ee\u9898\uff0c\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f\uff1a i. \u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u5728RabbitMQ\u4e2d\u624b\u52a8\u521b\u5efa\u5177\u6709durable\u7279\u6027\u7684Exchange\u548cQueue\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4ed6\u4eec\u7684\u540d\u5b57\u5206\u522b\u662f(cap.default.topic, cap.default.group)\u3002 ii. \u63d0\u524d\u8fd0\u884c\u4e00\u904d\u6240\u6709\u5b9e\u4f8b\uff0c\u8ba9Exchange\u548cQueue\u521d\u59cb\u5316\u3002 \u6211\u4eec\u5efa\u8bae\u91c7\u7528\u7b2c ii \u79cd\u65b9\u6848\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u505a\u5230\u3002","title":"\u4f8b\u5916\u60c5\u51b5"},{"location":"user-guide-cn/configuration/","text":"\u914d\u7f6e CAP \u4f7f\u7528 Microsoft.Extensions.DependencyInjection \u8fdb\u884c\u914d\u7f6e\u7684\u6ce8\u5165\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f9d\u8d56\u4e8e DI \u4ecejson\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u3002 Cap Options \u4f60\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u6765\u914d\u7f6e CAP \u4e2d\u7684\u4e00\u4e9b\u914d\u7f6e\u9879\uff0c\u4f8b\u5982 1 2 3 services.AddCap(capOptions = { capOptions.FailedCallback = //... }); CapOptions \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u914d\u7f6e\u9879\uff1a NAME DESCRIPTION TYPE DEFAULT DefaultGroup \u8ba2\u9605\u8005\u6240\u5c5e\u7684\u9ed8\u8ba4\u6d88\u8d39\u8005\u7ec4 string cap.queue+\u7a0b\u5e8f\u96c6\u540d\u79f0 SuccessedMessageExpiredAfter \u6210\u529f\u7684\u6d88\u606f\u88ab\u5220\u9664\u7684\u8fc7\u671f\u65f6\u95f4 int 3600 \u79d2 FailedCallback \u6267\u884c\u5931\u8d25\u6d88\u606f\u65f6\u7684\u56de\u8c03\u51fd\u6570\uff0c\u8be6\u60c5\u89c1\u4e0b\u6587 Action NULL FailedRetryInterval \u5931\u8d25\u91cd\u8bd5\u95f4\u9694\u65f6\u95f4 int 60 \u79d2 FailedRetryCount \u5931\u8d25\u6700\u5927\u91cd\u8bd5\u6b21\u6570 int 50 \u6b21 CapOptions \u63d0\u4f9b\u4e86 FailedCallback \u4e3a\u5904\u7406\u5931\u8d25\u7684\u6d88\u606f\u65f6\u7684\u56de\u8c03\u51fd\u6570\u3002\u5f53\u6d88\u606f\u591a\u6b21\u53d1\u9001\u5931\u8d25\u540e\uff0cCAP\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u6807\u8bb0\u4e3a Failed \uff0cCAP\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u5904\u7406\u8005\u7528\u6765\u5904\u7406\u8fd9\u79cd\u5931\u8d25\u7684\u6d88\u606f\uff0c\u9488\u5bf9\u5931\u8d25\u7684\u6d88\u606f\u4f1a\u91cd\u65b0\u653e\u5165\u5230\u961f\u5217\u4e2d\u53d1\u9001\u5230MQ\uff0c\u5728\u8fd9\u4e4b\u524d\u5982\u679c FailedCallback \u5177\u6709\u503c\uff0c\u90a3\u4e48\u5c06\u9996\u5148\u8c03\u7528\u6b64\u56de\u8c03\u51fd\u6570\u6765\u544a\u8bc9\u5ba2\u6237\u7aef\u3002 FailedCallback \u7684\u7c7b\u578b\u4e3a Action MessageType,string,string \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6d88\u606f\u7c7b\u578b\uff08\u53d1\u9001\u7684\u8fd8\u662f\u63a5\u6536\u7684\uff09\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u6d88\u606f\u7684\u540d\u79f0\uff08name\uff09\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\u6d88\u606f\u7684\u5185\u5bb9\uff08content\uff09\u3002 RabbitMQ Options CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0RabbitMQ\u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 RabbitMQ \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseRabbitMQ(rabbitMQOption= { // rabbitmq options. }); }); RabbitMQOptions \u63d0\u4f9b\u4e86\u6709\u5173RabbitMQ\u76f8\u5173\u7684\u914d\u7f6e\uff1a NAME DESCRIPTION TYPE DEFAULT HostName \u5bbf\u4e3b\u5730\u5740 string localhost UserName \u7528\u6237\u540d string guest Password \u5bc6\u7801 string guest VirtualHost \u865a\u62df\u4e3b\u673a string / Port \u7aef\u53e3\u53f7 int -1 TopicExchangeName CAP\u9ed8\u8ba4Exchange\u540d\u79f0 string cap.default.topic RequestedConnectionTimeout RabbitMQ\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 int 30,000 \u6beb\u79d2 SocketReadTimeout RabbitMQ\u6d88\u606f\u8bfb\u53d6\u8d85\u65f6\u65f6\u95f4 int 30,000 \u6beb\u79d2 SocketWriteTimeout RabbitMQ\u6d88\u606f\u5199\u5165\u8d85\u65f6\u65f6\u95f4 int 30,000 \u6beb\u79d2 QueueMessageExpires \u961f\u5217\u4e2d\u6d88\u606f\u81ea\u52a8\u5220\u9664\u65f6\u95f4 int (10\u5929) \u6beb\u79d2 Kafka Options CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 Kafka \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 Kafka \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 services.AddCap(capOptions = { capOptions.UseKafka(kafkaOption= { // kafka options. // kafkaOptions.MainConfig.Add( , ); }); }); KafkaOptions \u63d0\u4f9b\u4e86\u6709\u5173 Kafka \u76f8\u5173\u7684\u914d\u7f6e\uff0c\u7531\u4e8eKafka\u7684\u914d\u7f6e\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u6b64\u5904\u4f7f\u7528\u7684\u662f\u63d0\u4f9b\u7684 MainConfig \u5b57\u5178\u6765\u652f\u6301\u8fdb\u884c\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u8fd9\u91cc\u6765\u83b7\u53d6\u5bf9\u914d\u7f6e\u9879\u7684\u652f\u6301\u4fe1\u606f\u3002 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md EntityFramework Options \u5982\u679c\u4f7f\u7528\u7684 Entityframework \u6765\u4f5c\u4e3a\u6d88\u606f\u6301\u4e45\u5316\u5b58\u50a8\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u914d\u7f6e CAP EntityFramework \u914d\u7f6e\u9879\u7684\u65f6\u5019\u6765\u81ea\u5b9a\u4e49\u4e00\u4e9b\u914d\u7f6e\u3002 1 2 3 4 5 6 7 services.AddCap(x = { x.UseEntityFramework AppDbContext (efOption = { // entityframework options. }); }); \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86 UseEntityFramework \u7684\u914d\u7f6e\u9879\uff0c\u90a3\u4e48\u4f60\u4e0d\u9700\u8981\u518d\u6b21\u914d\u7f6e\u4e0b\u9762\u7684\u7ae0\u8282\u51e0\u4e2a\u9488\u5bf9\u4e0d\u540c\u6570\u636e\u5e93\u7684\u914d\u7f6e\uff0cCAP \u5c06\u4f1a\u81ea\u52a8\u8bfb\u53d6 DbContext \u4e2d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u76f8\u5173\u914d\u7f6e\u4fe1\u606f\u3002 NAME DESCRIPTION TYPE DEFAULT Schema Cap\u8868\u67b6\u6784 string Cap (SQL Server) Schema Cap\u8868\u67b6\u6784 string cap (PostgreSql) TableNamePrefix Cap\u8868\u524d\u7f00 string cap (MySql) SqlServer Options \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f EntityFramewrok\uff0c\u4f60\u7528\u4e0d\u5230\u6b64\u914d\u7f6e\u9879\u3002 CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 SqlServer \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 SqlServer \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseSqlServer(sqlserverOptions = { // sqlserverOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap\u8868\u67b6\u6784 string Cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null MySql Options \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f EntityFramewrok\uff0c\u4f60\u7528\u4e0d\u5230\u6b64\u914d\u7f6e\u9879\u3002 CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 MySql \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 MySql \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseMySql(mysqlOptions = { // mysqlOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT TableNamePrefix Cap\u8868\u540d\u524d\u7f00 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null PostgreSql Options \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f EntityFramewrok\uff0c\u4f60\u7528\u4e0d\u5230\u6b64\u914d\u7f6e\u9879\u3002 CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 PostgreSql \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 PostgreSql \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UsePostgreSql(postgreOptions = { // postgreOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap\u8868\u540d\u524d\u7f00 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null","title":"\u914d\u7f6e"},{"location":"user-guide-cn/configuration/#_1","text":"CAP \u4f7f\u7528 Microsoft.Extensions.DependencyInjection \u8fdb\u884c\u914d\u7f6e\u7684\u6ce8\u5165\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f9d\u8d56\u4e8e DI \u4ecejson\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u3002","title":"\u914d\u7f6e"},{"location":"user-guide-cn/configuration/#cap-options","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u6765\u914d\u7f6e CAP \u4e2d\u7684\u4e00\u4e9b\u914d\u7f6e\u9879\uff0c\u4f8b\u5982 1 2 3 services.AddCap(capOptions = { capOptions.FailedCallback = //... }); CapOptions \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u914d\u7f6e\u9879\uff1a NAME DESCRIPTION TYPE DEFAULT DefaultGroup \u8ba2\u9605\u8005\u6240\u5c5e\u7684\u9ed8\u8ba4\u6d88\u8d39\u8005\u7ec4 string cap.queue+\u7a0b\u5e8f\u96c6\u540d\u79f0 SuccessedMessageExpiredAfter \u6210\u529f\u7684\u6d88\u606f\u88ab\u5220\u9664\u7684\u8fc7\u671f\u65f6\u95f4 int 3600 \u79d2 FailedCallback \u6267\u884c\u5931\u8d25\u6d88\u606f\u65f6\u7684\u56de\u8c03\u51fd\u6570\uff0c\u8be6\u60c5\u89c1\u4e0b\u6587 Action NULL FailedRetryInterval \u5931\u8d25\u91cd\u8bd5\u95f4\u9694\u65f6\u95f4 int 60 \u79d2 FailedRetryCount \u5931\u8d25\u6700\u5927\u91cd\u8bd5\u6b21\u6570 int 50 \u6b21 CapOptions \u63d0\u4f9b\u4e86 FailedCallback \u4e3a\u5904\u7406\u5931\u8d25\u7684\u6d88\u606f\u65f6\u7684\u56de\u8c03\u51fd\u6570\u3002\u5f53\u6d88\u606f\u591a\u6b21\u53d1\u9001\u5931\u8d25\u540e\uff0cCAP\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u6807\u8bb0\u4e3a Failed \uff0cCAP\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u5904\u7406\u8005\u7528\u6765\u5904\u7406\u8fd9\u79cd\u5931\u8d25\u7684\u6d88\u606f\uff0c\u9488\u5bf9\u5931\u8d25\u7684\u6d88\u606f\u4f1a\u91cd\u65b0\u653e\u5165\u5230\u961f\u5217\u4e2d\u53d1\u9001\u5230MQ\uff0c\u5728\u8fd9\u4e4b\u524d\u5982\u679c FailedCallback \u5177\u6709\u503c\uff0c\u90a3\u4e48\u5c06\u9996\u5148\u8c03\u7528\u6b64\u56de\u8c03\u51fd\u6570\u6765\u544a\u8bc9\u5ba2\u6237\u7aef\u3002 FailedCallback \u7684\u7c7b\u578b\u4e3a Action MessageType,string,string \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6d88\u606f\u7c7b\u578b\uff08\u53d1\u9001\u7684\u8fd8\u662f\u63a5\u6536\u7684\uff09\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u6d88\u606f\u7684\u540d\u79f0\uff08name\uff09\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\u6d88\u606f\u7684\u5185\u5bb9\uff08content\uff09\u3002","title":"Cap Options"},{"location":"user-guide-cn/configuration/#rabbitmq-options","text":"CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0RabbitMQ\u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 RabbitMQ \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseRabbitMQ(rabbitMQOption= { // rabbitmq options. }); }); RabbitMQOptions \u63d0\u4f9b\u4e86\u6709\u5173RabbitMQ\u76f8\u5173\u7684\u914d\u7f6e\uff1a NAME DESCRIPTION TYPE DEFAULT HostName \u5bbf\u4e3b\u5730\u5740 string localhost UserName \u7528\u6237\u540d string guest Password \u5bc6\u7801 string guest VirtualHost \u865a\u62df\u4e3b\u673a string / Port \u7aef\u53e3\u53f7 int -1 TopicExchangeName CAP\u9ed8\u8ba4Exchange\u540d\u79f0 string cap.default.topic RequestedConnectionTimeout RabbitMQ\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 int 30,000 \u6beb\u79d2 SocketReadTimeout RabbitMQ\u6d88\u606f\u8bfb\u53d6\u8d85\u65f6\u65f6\u95f4 int 30,000 \u6beb\u79d2 SocketWriteTimeout RabbitMQ\u6d88\u606f\u5199\u5165\u8d85\u65f6\u65f6\u95f4 int 30,000 \u6beb\u79d2 QueueMessageExpires \u961f\u5217\u4e2d\u6d88\u606f\u81ea\u52a8\u5220\u9664\u65f6\u95f4 int (10\u5929) \u6beb\u79d2","title":"RabbitMQ Options"},{"location":"user-guide-cn/configuration/#kafka-options","text":"CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 Kafka \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 Kafka \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 services.AddCap(capOptions = { capOptions.UseKafka(kafkaOption= { // kafka options. // kafkaOptions.MainConfig.Add( , ); }); }); KafkaOptions \u63d0\u4f9b\u4e86\u6709\u5173 Kafka \u76f8\u5173\u7684\u914d\u7f6e\uff0c\u7531\u4e8eKafka\u7684\u914d\u7f6e\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u6b64\u5904\u4f7f\u7528\u7684\u662f\u63d0\u4f9b\u7684 MainConfig \u5b57\u5178\u6765\u652f\u6301\u8fdb\u884c\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u8fd9\u91cc\u6765\u83b7\u53d6\u5bf9\u914d\u7f6e\u9879\u7684\u652f\u6301\u4fe1\u606f\u3002 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md","title":"Kafka Options"},{"location":"user-guide-cn/configuration/#entityframework-options","text":"\u5982\u679c\u4f7f\u7528\u7684 Entityframework \u6765\u4f5c\u4e3a\u6d88\u606f\u6301\u4e45\u5316\u5b58\u50a8\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u914d\u7f6e CAP EntityFramework \u914d\u7f6e\u9879\u7684\u65f6\u5019\u6765\u81ea\u5b9a\u4e49\u4e00\u4e9b\u914d\u7f6e\u3002 1 2 3 4 5 6 7 services.AddCap(x = { x.UseEntityFramework AppDbContext (efOption = { // entityframework options. }); }); \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86 UseEntityFramework \u7684\u914d\u7f6e\u9879\uff0c\u90a3\u4e48\u4f60\u4e0d\u9700\u8981\u518d\u6b21\u914d\u7f6e\u4e0b\u9762\u7684\u7ae0\u8282\u51e0\u4e2a\u9488\u5bf9\u4e0d\u540c\u6570\u636e\u5e93\u7684\u914d\u7f6e\uff0cCAP \u5c06\u4f1a\u81ea\u52a8\u8bfb\u53d6 DbContext \u4e2d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u76f8\u5173\u914d\u7f6e\u4fe1\u606f\u3002 NAME DESCRIPTION TYPE DEFAULT Schema Cap\u8868\u67b6\u6784 string Cap (SQL Server) Schema Cap\u8868\u67b6\u6784 string cap (PostgreSql) TableNamePrefix Cap\u8868\u524d\u7f00 string cap (MySql)","title":"EntityFramework Options"},{"location":"user-guide-cn/configuration/#sqlserver-options","text":"\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f EntityFramewrok\uff0c\u4f60\u7528\u4e0d\u5230\u6b64\u914d\u7f6e\u9879\u3002 CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 SqlServer \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 SqlServer \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseSqlServer(sqlserverOptions = { // sqlserverOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap\u8868\u67b6\u6784 string Cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null","title":"SqlServer Options"},{"location":"user-guide-cn/configuration/#mysql-options","text":"\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f EntityFramewrok\uff0c\u4f60\u7528\u4e0d\u5230\u6b64\u914d\u7f6e\u9879\u3002 CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 MySql \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 MySql \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UseMySql(mysqlOptions = { // mysqlOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT TableNamePrefix Cap\u8868\u540d\u524d\u7f00 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null","title":"MySql Options"},{"location":"user-guide-cn/configuration/#postgresql-options","text":"\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f EntityFramewrok\uff0c\u4f60\u7528\u4e0d\u5230\u6b64\u914d\u7f6e\u9879\u3002 CAP \u91c7\u7528\u7684\u662f\u9488\u5bf9 CapOptions \u8fdb\u884c\u6269\u5c55\u6765\u5b9e\u73b0 PostgreSql \u7684\u914d\u7f6e\u529f\u80fd\uff0c\u6240\u4ee5\u9488\u5bf9 PostgreSql \u7684\u914d\u7f6e\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 services.AddCap(capOptions = { capOptions.UsePostgreSql(postgreOptions = { // postgreOptions.ConnectionString }); }); NAME DESCRIPTION TYPE DEFAULT Schema Cap\u8868\u540d\u524d\u7f00 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null","title":"PostgreSql Options"},{"location":"user-guide-cn/design-principle/","text":"\u8bbe\u8ba1\u539f\u7406 \u52a8\u673a \u968f\u7740\u5fae\u670d\u52a1\u67b6\u6784\u7684\u6d41\u884c\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u5728\u5c1d\u8bd5\u4f7f\u7528\u5fae\u670d\u52a1\u6765\u67b6\u6784\u4ed6\u4eec\u7684\u7cfb\u7edf\uff0c\u800c\u5728\u8fd9\u5176\u4e2d\u6211\u4eec\u4f1a\u9047\u5230\u4f8b\u5982\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u6211\u6ca1\u6709\u53d1\u73b0\u7b80\u5355\u5e76\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u6765\u6253\u9020\u8fd9\u6837\u4e00\u4e2a\u5e93\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u6700\u521d CAP \u662f\u4e3a\u4e86\u89e3\u51b3\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u4e8b\u52a1\u95ee\u9898\uff0c\u5979\u91c7\u7528\u7684\u662f \u5f02\u6b65\u786e\u4fdd \u8fd9\u79cd\u5f31\u4e00\u81f4\u6027\u4e8b\u52a1\u673a\u5236\u5b9e\u73b0\u4e86\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u6027\uff0c\u66f4\u591a\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\u53ef\u4ee5\u67e5\u770b\u7b2c6\u8282\u3002 \u73b0\u5728 CAP \u9664\u4e86\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u95ee\u9898\u5916\uff0c\u5979\u53e6\u5916\u4e00\u4e2a\u91cd\u8981\u7684\u529f\u80fd\u5c31\u662f\u4f5c\u4e3a EventBus \u6765\u4f7f\u7528\uff0c\u5979\u5177\u6709 EventBus \u7684\u6240\u6709\u529f\u80fd\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u66f4\u52a0\u7b80\u5316\u7684\u65b9\u5f0f\u6765\u5904\u7406EventBus\u4e2d\u7684\u53d1\u5e03/\u8ba2\u9605\u3002 \u6301\u4e45\u5316 CAP \u4f9d\u9760\u672c\u5730\u6570\u636e\u5e93\u5b9e\u73b0\u6d88\u606f\u7684\u6301\u4e45\u5316\uff0cCAP \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5e94\u5bf9\u4e00\u5207\u73af\u5883\u6216\u8005\u7f51\u7edc\u5f02\u5e38\u5bfc\u81f4\u6d88\u606f\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u6d88\u606f\u7684\u53ef\u9760\u6027\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u57fa\u77f3\uff0c\u6240\u4ee5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u6d88\u606f\u90fd\u4e0d\u80fd\u4e22\u5931\u3002 \u5bf9\u4e8e\u6d88\u606f\u7684\u6301\u4e45\u5316\u5206\u4e3a\u4e24\u79cd\uff1a \u2460 \u6d88\u606f\u8fdb\u5165\u6d88\u606f\u961f\u5217\u4e4b\u524d\u7684\u6301\u4e45\u5316 \u5728\u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u524d\uff0cCAP\u4f7f\u7528\u672c\u5730\u6570\u636e\u5e93\u8868\u5bf9\u6d88\u606f\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u6d88\u606f\u961f\u5217\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u7f51\u7edc\u9519\u8bef\u65f6\u5019\u6d88\u606f\u662f\u6ca1\u6709\u4e22\u5931\u7684\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u79cd\u673a\u5236\u7684\u53ef\u9760\u6027\uff0cCAP\u4f7f\u7528\u548c\u4e1a\u52a1\u4ee3\u7801\u76f8\u540c\u7684\u6570\u636e\u5e93\u4e8b\u52a1\u6765\u4fdd\u8bc1\u4e1a\u52a1\u64cd\u4f5c\u548cCAP\u7684\u6d88\u606f\u5728\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\u662f\u5f3a\u4e00\u81f4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u8fdb\u884c\u6d88\u606f\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u4e00\u65b9\u53d1\u751f\u5f02\u5e38\u60c5\u51b5\u6570\u636e\u5e93\u90fd\u4f1a\u8fdb\u884c\u56de\u6eda\u64cd\u4f5c\u3002 \u2461 \u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\u7684\u6301\u4e45\u5316 \u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\uff0cCAP\u4f1a\u542f\u52a8\u6d88\u606f\u961f\u5217\u7684\u6301\u4e45\u5316\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u5728 RabbitMQ \u548c Kafka \u4e2dCAP\u7684\u6d88\u606f\u662f\u5982\u4f55\u6301\u4e45\u5316\u7684\u3002 \u9488\u5bf9\u4e8e RabbitMQ \u4e2d\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0cCAP \u4f7f\u7528\u7684\u662f\u5177\u6709\u6d88\u606f\u6301\u4e45\u5316\u529f\u80fd\u7684\u6d88\u8d39\u8005\u961f\u5217\uff0c\u4f46\u662f\u8fd9\u91cc\u9762\u53ef\u80fd\u6709\u4f8b\u5916\u60c5\u51b5\uff0c\u53c2\u52a0 2.2.1 \u7ae0\u8282\u3002 \u7531\u4e8e Kafka \u5929\u751f\u8bbe\u8ba1\u7684\u5c31\u662f\u4f7f\u7528\u6587\u4ef6\u8fdb\u884c\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0c\u5728\u6240\u4ee5\u5728\u6d88\u606f\u8fdb\u5165\u5230Kafka\u4e4b\u540e\uff0cKafka\u4f1a\u4fdd\u8bc1\u6d88\u606f\u80fd\u591f\u6b63\u786e\u88ab\u6301\u4e45\u5316\u800c\u4e0d\u4e22\u5931\u3002 \u901a\u8baf\u6570\u636e\u6d41 CAP \u4e2d\u6d88\u606f\u7684\u6d41\u8f6c\u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a 2.2\u7248\u672c\u4ee5\u524d \u201c P \u201d \u4ee3\u8868\u6d88\u606f\u53d1\u9001\u8005\uff08\u751f\u4ea7\u8005\uff09\u3002 \u201c C \u201d \u4ee3\u8868\u6d88\u606f\u6d88\u8d39\u8005\uff08\u8ba2\u9605\u8005\uff09\u3002 2.2\u7248\u672c\u4ee5\u540e \u57282.2\u4ee5\u540e\u7684\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u8c03\u6574\u4e86\u4e00\u4e9b\u6d88\u606f\u7684\u6d41\u8f6c\u6d41\u7a0b\uff0c\u6211\u4eec\u79fb\u9664\u4e86\u6570\u636e\u5e93\u4e2d\u7684 Queue \u8868\u4f7f\u7528\u5185\u5b58\u961f\u5217\u6765\u4ee3\u66ff\uff0c\u8be6\u60c5\u89c1: Improve the implementation mechanism of queue mode \u4e00\u81f4\u6027 CAP \u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u4f5c\u4e3a\u7684\u4e00\u81f4\u6027\u65b9\u6848\uff0c\u6b64\u65b9\u6848\u662f\u9075\u5faa CAP \u7406\u8bba\uff0c\u4ee5\u4e0b\u662fCAP\u7406\u8bba\u7684\u63cf\u8ff0\u3002 C\uff08\u4e00\u81f4\u6027\uff09\u4e00\u81f4\u6027\u662f\u6307\u6570\u636e\u7684\u539f\u5b50\u6027\uff0c\u5728\u7ecf\u5178\u7684\u6570\u636e\u5e93\u4e2d\u901a\u8fc7\u4e8b\u52a1\u6765\u4fdd\u969c\uff0c\u4e8b\u52a1\u5b8c\u6210\u65f6\uff0c\u65e0\u8bba\u6210\u529f\u6216\u56de\u6eda\uff0c\u6570\u636e\u90fd\u4f1a\u5904\u4e8e\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\uff0c\u4e00\u81f4\u6027\u662f\u6307\u591a\u4e2a\u8282\u70b9\u6570\u636e\u662f\u5426\u4e00\u81f4\uff1b A\uff08\u53ef\u7528\u6027\uff09\u670d\u52a1\u4e00\u76f4\u4fdd\u6301\u53ef\u7528\u7684\u72b6\u6001\uff0c\u5f53\u7528\u6237\u53d1\u51fa\u4e00\u4e2a\u8bf7\u6c42\uff0c\u670d\u52a1\u80fd\u5728\u4e00\u5b9a\u7684\u65f6\u95f4\u5185\u8fd4\u56de\u7ed3\u679c\uff1b P\uff08\u5206\u533a\u5bb9\u5fcd\u6027\uff09\u5728\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\uff0c\u53ef\u80fd\u56e0\u4e3a\u4e00\u4e9b\u5206\u5e03\u5f0f\u7684\u539f\u56e0\u5bfc\u81f4\u7cfb\u7edf\u65e0\u6cd5\u8fd0\u8f6c\uff0c\u597d\u7684\u5206\u533a\u5bb9\u5fcd\u6027\uff0c\u4f7f\u5e94\u7528\u867d\u7136\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u4f46\u662f\u597d\u50cf\u4e00\u4e2a\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c\u7684\u6574\u4f53 \u6839\u636e \u201cCAP\u201d\u5206\u5e03\u5f0f\u7406\u8bba \uff0c \u5728\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u4e3a\u4e86\u53ef\u7528\u6027\u548c\u5206\u533a\u5bb9\u9519\u6027\uff0c\u5fcd\u75db\u653e\u5f03\u5f3a\u4e00\u81f4\u652f\u6301\uff0c\u8f6c\u800c\u8ffd\u6c42\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5927\u90e8\u5206\u4e1a\u52a1\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u63a5\u53d7\u77ed\u6682\u7684\u4e0d\u4e00\u81f4\u7684\u3002 \u7b2c 6 \u8282\u5c06\u5bf9\u6b64\u505a\u8fdb\u4e00\u6b65\u4ecb\u7ecd\u3002","title":"\u8bbe\u8ba1\u539f\u7406"},{"location":"user-guide-cn/design-principle/#_1","text":"","title":"\u8bbe\u8ba1\u539f\u7406"},{"location":"user-guide-cn/design-principle/#_2","text":"\u968f\u7740\u5fae\u670d\u52a1\u67b6\u6784\u7684\u6d41\u884c\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u5728\u5c1d\u8bd5\u4f7f\u7528\u5fae\u670d\u52a1\u6765\u67b6\u6784\u4ed6\u4eec\u7684\u7cfb\u7edf\uff0c\u800c\u5728\u8fd9\u5176\u4e2d\u6211\u4eec\u4f1a\u9047\u5230\u4f8b\u5982\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u6211\u6ca1\u6709\u53d1\u73b0\u7b80\u5355\u5e76\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u6765\u6253\u9020\u8fd9\u6837\u4e00\u4e2a\u5e93\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u6700\u521d CAP \u662f\u4e3a\u4e86\u89e3\u51b3\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u4e8b\u52a1\u95ee\u9898\uff0c\u5979\u91c7\u7528\u7684\u662f \u5f02\u6b65\u786e\u4fdd \u8fd9\u79cd\u5f31\u4e00\u81f4\u6027\u4e8b\u52a1\u673a\u5236\u5b9e\u73b0\u4e86\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u6027\uff0c\u66f4\u591a\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\u53ef\u4ee5\u67e5\u770b\u7b2c6\u8282\u3002 \u73b0\u5728 CAP \u9664\u4e86\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u95ee\u9898\u5916\uff0c\u5979\u53e6\u5916\u4e00\u4e2a\u91cd\u8981\u7684\u529f\u80fd\u5c31\u662f\u4f5c\u4e3a EventBus \u6765\u4f7f\u7528\uff0c\u5979\u5177\u6709 EventBus \u7684\u6240\u6709\u529f\u80fd\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86\u66f4\u52a0\u7b80\u5316\u7684\u65b9\u5f0f\u6765\u5904\u7406EventBus\u4e2d\u7684\u53d1\u5e03/\u8ba2\u9605\u3002","title":"\u52a8\u673a"},{"location":"user-guide-cn/design-principle/#_3","text":"CAP \u4f9d\u9760\u672c\u5730\u6570\u636e\u5e93\u5b9e\u73b0\u6d88\u606f\u7684\u6301\u4e45\u5316\uff0cCAP \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5e94\u5bf9\u4e00\u5207\u73af\u5883\u6216\u8005\u7f51\u7edc\u5f02\u5e38\u5bfc\u81f4\u6d88\u606f\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u6d88\u606f\u7684\u53ef\u9760\u6027\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u57fa\u77f3\uff0c\u6240\u4ee5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u6d88\u606f\u90fd\u4e0d\u80fd\u4e22\u5931\u3002 \u5bf9\u4e8e\u6d88\u606f\u7684\u6301\u4e45\u5316\u5206\u4e3a\u4e24\u79cd\uff1a \u2460 \u6d88\u606f\u8fdb\u5165\u6d88\u606f\u961f\u5217\u4e4b\u524d\u7684\u6301\u4e45\u5316 \u5728\u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u524d\uff0cCAP\u4f7f\u7528\u672c\u5730\u6570\u636e\u5e93\u8868\u5bf9\u6d88\u606f\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u6d88\u606f\u961f\u5217\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u7f51\u7edc\u9519\u8bef\u65f6\u5019\u6d88\u606f\u662f\u6ca1\u6709\u4e22\u5931\u7684\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u79cd\u673a\u5236\u7684\u53ef\u9760\u6027\uff0cCAP\u4f7f\u7528\u548c\u4e1a\u52a1\u4ee3\u7801\u76f8\u540c\u7684\u6570\u636e\u5e93\u4e8b\u52a1\u6765\u4fdd\u8bc1\u4e1a\u52a1\u64cd\u4f5c\u548cCAP\u7684\u6d88\u606f\u5728\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\u662f\u5f3a\u4e00\u81f4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u8fdb\u884c\u6d88\u606f\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u4e00\u65b9\u53d1\u751f\u5f02\u5e38\u60c5\u51b5\u6570\u636e\u5e93\u90fd\u4f1a\u8fdb\u884c\u56de\u6eda\u64cd\u4f5c\u3002 \u2461 \u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\u7684\u6301\u4e45\u5316 \u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\uff0cCAP\u4f1a\u542f\u52a8\u6d88\u606f\u961f\u5217\u7684\u6301\u4e45\u5316\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u5728 RabbitMQ \u548c Kafka \u4e2dCAP\u7684\u6d88\u606f\u662f\u5982\u4f55\u6301\u4e45\u5316\u7684\u3002 \u9488\u5bf9\u4e8e RabbitMQ \u4e2d\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0cCAP \u4f7f\u7528\u7684\u662f\u5177\u6709\u6d88\u606f\u6301\u4e45\u5316\u529f\u80fd\u7684\u6d88\u8d39\u8005\u961f\u5217\uff0c\u4f46\u662f\u8fd9\u91cc\u9762\u53ef\u80fd\u6709\u4f8b\u5916\u60c5\u51b5\uff0c\u53c2\u52a0 2.2.1 \u7ae0\u8282\u3002 \u7531\u4e8e Kafka \u5929\u751f\u8bbe\u8ba1\u7684\u5c31\u662f\u4f7f\u7528\u6587\u4ef6\u8fdb\u884c\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0c\u5728\u6240\u4ee5\u5728\u6d88\u606f\u8fdb\u5165\u5230Kafka\u4e4b\u540e\uff0cKafka\u4f1a\u4fdd\u8bc1\u6d88\u606f\u80fd\u591f\u6b63\u786e\u88ab\u6301\u4e45\u5316\u800c\u4e0d\u4e22\u5931\u3002","title":"\u6301\u4e45\u5316"},{"location":"user-guide-cn/design-principle/#_4","text":"CAP \u4e2d\u6d88\u606f\u7684\u6d41\u8f6c\u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a 2.2\u7248\u672c\u4ee5\u524d \u201c P \u201d \u4ee3\u8868\u6d88\u606f\u53d1\u9001\u8005\uff08\u751f\u4ea7\u8005\uff09\u3002 \u201c C \u201d \u4ee3\u8868\u6d88\u606f\u6d88\u8d39\u8005\uff08\u8ba2\u9605\u8005\uff09\u3002 2.2\u7248\u672c\u4ee5\u540e \u57282.2\u4ee5\u540e\u7684\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u8c03\u6574\u4e86\u4e00\u4e9b\u6d88\u606f\u7684\u6d41\u8f6c\u6d41\u7a0b\uff0c\u6211\u4eec\u79fb\u9664\u4e86\u6570\u636e\u5e93\u4e2d\u7684 Queue \u8868\u4f7f\u7528\u5185\u5b58\u961f\u5217\u6765\u4ee3\u66ff\uff0c\u8be6\u60c5\u89c1: Improve the implementation mechanism of queue mode","title":"\u901a\u8baf\u6570\u636e\u6d41"},{"location":"user-guide-cn/design-principle/#_5","text":"CAP \u91c7\u7528\u6700\u7ec8\u4e00\u81f4\u6027\u4f5c\u4e3a\u7684\u4e00\u81f4\u6027\u65b9\u6848\uff0c\u6b64\u65b9\u6848\u662f\u9075\u5faa CAP \u7406\u8bba\uff0c\u4ee5\u4e0b\u662fCAP\u7406\u8bba\u7684\u63cf\u8ff0\u3002 C\uff08\u4e00\u81f4\u6027\uff09\u4e00\u81f4\u6027\u662f\u6307\u6570\u636e\u7684\u539f\u5b50\u6027\uff0c\u5728\u7ecf\u5178\u7684\u6570\u636e\u5e93\u4e2d\u901a\u8fc7\u4e8b\u52a1\u6765\u4fdd\u969c\uff0c\u4e8b\u52a1\u5b8c\u6210\u65f6\uff0c\u65e0\u8bba\u6210\u529f\u6216\u56de\u6eda\uff0c\u6570\u636e\u90fd\u4f1a\u5904\u4e8e\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\uff0c\u4e00\u81f4\u6027\u662f\u6307\u591a\u4e2a\u8282\u70b9\u6570\u636e\u662f\u5426\u4e00\u81f4\uff1b A\uff08\u53ef\u7528\u6027\uff09\u670d\u52a1\u4e00\u76f4\u4fdd\u6301\u53ef\u7528\u7684\u72b6\u6001\uff0c\u5f53\u7528\u6237\u53d1\u51fa\u4e00\u4e2a\u8bf7\u6c42\uff0c\u670d\u52a1\u80fd\u5728\u4e00\u5b9a\u7684\u65f6\u95f4\u5185\u8fd4\u56de\u7ed3\u679c\uff1b P\uff08\u5206\u533a\u5bb9\u5fcd\u6027\uff09\u5728\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\uff0c\u53ef\u80fd\u56e0\u4e3a\u4e00\u4e9b\u5206\u5e03\u5f0f\u7684\u539f\u56e0\u5bfc\u81f4\u7cfb\u7edf\u65e0\u6cd5\u8fd0\u8f6c\uff0c\u597d\u7684\u5206\u533a\u5bb9\u5fcd\u6027\uff0c\u4f7f\u5e94\u7528\u867d\u7136\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u4f46\u662f\u597d\u50cf\u4e00\u4e2a\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c\u7684\u6574\u4f53 \u6839\u636e \u201cCAP\u201d\u5206\u5e03\u5f0f\u7406\u8bba \uff0c \u5728\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u4e3a\u4e86\u53ef\u7528\u6027\u548c\u5206\u533a\u5bb9\u9519\u6027\uff0c\u5fcd\u75db\u653e\u5f03\u5f3a\u4e00\u81f4\u652f\u6301\uff0c\u8f6c\u800c\u8ffd\u6c42\u6700\u7ec8\u4e00\u81f4\u6027\u3002\u5927\u90e8\u5206\u4e1a\u52a1\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u63a5\u53d7\u77ed\u6682\u7684\u4e0d\u4e00\u81f4\u7684\u3002 \u7b2c 6 \u8282\u5c06\u5bf9\u6b64\u505a\u8fdb\u4e00\u6b65\u4ecb\u7ecd\u3002","title":"\u4e00\u81f4\u6027"},{"location":"user-guide-cn/distributed-transactions/","text":"\u9488\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0cCAP \u91c7\u7528\u7684\u662f\u201c\u5f02\u6b65\u786e\u4fdd\u201d\u8fd9\u79cd\u65b9\u6848\u3002 \u5f02\u6b65\u786e\u4fdd \u5f02\u6b65\u786e\u4fdd\u8fd9\u79cd\u65b9\u6848\u53c8\u53eb\u505a\u672c\u5730\u6d88\u606f\u8868\uff0c\u8fd9\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u65b9\u6848\uff0c\u65b9\u6848\u6700\u521d\u6765\u6e90\u4e8e eBay\uff0c\u53c2\u8003\u8d44\u6599\u89c1\u6bb5\u672b\u94fe\u63a5\u3002\u8fd9\u79cd\u65b9\u6848\u76ee\u524d\u4e5f\u662f\u4f01\u4e1a\u4e2d\u4f7f\u7528\u6700\u591a\u7684\u65b9\u6848\u4e4b\u4e00\u3002 \u76f8\u5bf9\u4e8e TCC \u6216\u8005 2PC/3PC \u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6848\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u6765\u8bf4\u662f\u6700\u7b80\u5355\u7684\uff0c\u800c\u4e14\u5b83\u662f\u53bb\u4e2d\u5fc3\u5316\u7684\u3002\u5728TCC \u6216\u8005 2PC \u7684\u65b9\u6848\u4e2d\uff0c\u5fc5\u987b\u5177\u6709\u4e8b\u52a1\u534f\u8c03\u5668\u6765\u5904\u7406\u6bcf\u4e2a\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u800c\u6b64\u79cd\u65b9\u6848\u4e0d\u9700\u8981\u4e8b\u52a1\u534f\u8c03\u5668\u3002 \u53e6\u5916 2PC/TCC \u8fd9\u79cd\u65b9\u6848\u5982\u679c\u670d\u52a1\u4f9d\u8d56\u8fc7\u591a\uff0c\u4f1a\u5e26\u6765\u7ba1\u7406\u590d\u6742\u6027\u589e\u52a0\u548c\u7a33\u5b9a\u6027\u98ce\u9669\u589e\u5927\u7684\u95ee\u9898\u3002\u8bd5\u60f3\u5982\u679c\u6211\u4eec\u5f3a\u4f9d\u8d56 10 \u4e2a\u670d\u52a1\uff0c9 \u4e2a\u90fd\u6267\u884c\u6210\u529f\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u6267\u884c\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u524d\u9762 9 \u4e2a\u90fd\u8981\u56de\u6eda\u6389\uff1f\u8fd9\u4e2a\u6210\u672c\u8fd8\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4 2PC \u6216\u8005 TCC \u8fd9\u79cd\u65b9\u6848\u4e0d\u597d\uff0c\u56e0\u4e3a\u6bcf\u4e00\u79cd\u65b9\u6848\u90fd\u6709\u5176\u76f8\u5bf9\u4f18\u52bf\u7684\u4f7f\u7528\u573a\u666f\u548c\u4f18\u7f3a\u70b9\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u4ecb\u7ecd\u4e86\u3002 \u4e2d\u6587\uff1a http://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html \u82f1\u6587\uff1a http://queue.acm.org/detail.cfm?id=1394128","title":"\u5206\u5e03\u5f0f\u4e8b\u52a1"},{"location":"user-guide-cn/distributed-transactions/#_1","text":"\u5f02\u6b65\u786e\u4fdd\u8fd9\u79cd\u65b9\u6848\u53c8\u53eb\u505a\u672c\u5730\u6d88\u606f\u8868\uff0c\u8fd9\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u65b9\u6848\uff0c\u65b9\u6848\u6700\u521d\u6765\u6e90\u4e8e eBay\uff0c\u53c2\u8003\u8d44\u6599\u89c1\u6bb5\u672b\u94fe\u63a5\u3002\u8fd9\u79cd\u65b9\u6848\u76ee\u524d\u4e5f\u662f\u4f01\u4e1a\u4e2d\u4f7f\u7528\u6700\u591a\u7684\u65b9\u6848\u4e4b\u4e00\u3002 \u76f8\u5bf9\u4e8e TCC \u6216\u8005 2PC/3PC \u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6848\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u6765\u8bf4\u662f\u6700\u7b80\u5355\u7684\uff0c\u800c\u4e14\u5b83\u662f\u53bb\u4e2d\u5fc3\u5316\u7684\u3002\u5728TCC \u6216\u8005 2PC \u7684\u65b9\u6848\u4e2d\uff0c\u5fc5\u987b\u5177\u6709\u4e8b\u52a1\u534f\u8c03\u5668\u6765\u5904\u7406\u6bcf\u4e2a\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u800c\u6b64\u79cd\u65b9\u6848\u4e0d\u9700\u8981\u4e8b\u52a1\u534f\u8c03\u5668\u3002 \u53e6\u5916 2PC/TCC \u8fd9\u79cd\u65b9\u6848\u5982\u679c\u670d\u52a1\u4f9d\u8d56\u8fc7\u591a\uff0c\u4f1a\u5e26\u6765\u7ba1\u7406\u590d\u6742\u6027\u589e\u52a0\u548c\u7a33\u5b9a\u6027\u98ce\u9669\u589e\u5927\u7684\u95ee\u9898\u3002\u8bd5\u60f3\u5982\u679c\u6211\u4eec\u5f3a\u4f9d\u8d56 10 \u4e2a\u670d\u52a1\uff0c9 \u4e2a\u90fd\u6267\u884c\u6210\u529f\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u6267\u884c\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u524d\u9762 9 \u4e2a\u90fd\u8981\u56de\u6eda\u6389\uff1f\u8fd9\u4e2a\u6210\u672c\u8fd8\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4 2PC \u6216\u8005 TCC \u8fd9\u79cd\u65b9\u6848\u4e0d\u597d\uff0c\u56e0\u4e3a\u6bcf\u4e00\u79cd\u65b9\u6848\u90fd\u6709\u5176\u76f8\u5bf9\u4f18\u52bf\u7684\u4f7f\u7528\u573a\u666f\u548c\u4f18\u7f3a\u70b9\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u4ecb\u7ecd\u4e86\u3002 \u4e2d\u6587\uff1a http://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html \u82f1\u6587\uff1a http://queue.acm.org/detail.cfm?id=1394128","title":"\u5f02\u6b65\u786e\u4fdd"},{"location":"user-guide-cn/faq/","text":"1\u3001\u6709CAP\u5b66\u4e60QQ\u7fa4\u5417\uff1f CAP\u6ca1\u6709\u7fa4\u3002 \u539f\u56e0\u662f\u6211\u5e0c\u671b\u57f9\u517b\u5927\u5bb6\u72ec\u7acb\u601d\u8003\u548c\u9047\u5230\u95ee\u9898\u65f6\u5019\u7684\u89e3\u51b3\u80fd\u529b\u3002 \u4f7f\u7528\u65f6\u5019\u9047\u5230\u95ee\u9898\u5148\u5c1d\u8bd5\u770b\u6587\u6863\u548c\u72ec\u7acb\u89e3\u51b3\uff0c\u5982\u679c\u89e3\u51b3\u4e0d\u4e86\uff0c\u53ef\u4ee5\u63d0ISSUE\u6216\u8005\u53d1\u90ae\u4ef6\u3002 QQ\u7fa4\u6709\u6548\u6c9f\u901a\u592a\u4f4e\uff0c\u6d6a\u8d39\u65f6\u95f4\u3002 2\u3001CAP\u8981\u6c42\u53d1\u9001\u8005\u4e0e\u63a5\u6536\u8005\u5fc5\u987b\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u636e\u5e93\u5417\uff1f \u6ca1\u6709\u8981\u6c42\uff0c\u8981\u6c42\u4e0d\u540c\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u636e\u5e93\u3002\u4e0d\u540c\u5b9e\u4f8b\u7684\u610f\u601d\u4e3a\uff0c\u4e0d\u540c\u4ee3\u7801\u7684\u4e24\u5957\u7a0b\u5e8f\u3002 \u4f46\u662f\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u5728\u4e0d\u540c\u7684\u5b9e\u4f8b\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\uff0c\u90a3\u4e48\u53ef\u4ee5\u53c2\u8003\u4e0b\u97623\u7684\u7b54\u6848\u3002 3\u3001CAP\u5982\u4f55\u5728\u4e0d\u540c\u7684\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\uff1f \u5982\u679c\u60f3\u5728\u4e0d\u540c\u7684\u5b9e\u4f8b\uff08\u7a0b\u5e8f\uff09\u4e2d\u8fde\u63a5\u76f8\u540c\u7684\u6570\u636e\u5e93\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u914d\u7f6eCAP\u7684\u65f6\u5019\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u8868\u540d\u524d\u7f00\u6765\u5b9e\u73b0\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6765\u6307\u5b9a\u6570\u636e\u5e93\u8868\u540d\u524d\u7f00\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 public void ConfigureServices(IServiceCollection services) { services.AddCap(x = { x.UseKafka( ); x.UseMySql(opt = { opt.ConnectionString = connection string ; opt.TableNamePrefix = appone ; // \u5728\u8fd9\u91cc\u914d\u7f6e\u4e0d\u540c\u7684\u5b9e\u4f8b\u4f7f\u7528\u7684\u8868\u540d\u524d\u7f00 }); }); } \u6ce8\u610f\uff1a\u76f8\u540c\u7684\u5b9e\u4f8b\u4e0d\u9700\u8981\u6307\u5b9a\u4e0d\u540c\u7684\u8868\u540d\u79f0\u524d\u7f00\uff0c\u4ed6\u4eec\u5728\u63a5\u6536\u6d88\u606f\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u3002 4\u3001CAP\u53ef\u4ee5\u4e0d\u4f7f\u7528\u6570\u636e\u5e93\u5417? \u6211\u4ec5\u4ec5\u662f\u60f3\u901a\u8fc7\u5979\u6765\u4f20\u9012\u6d88\u606f\uff0c\u6211\u53ef\u4ee5\u63a5\u53d7\u6d88\u606f\u4e22\u5931\u7684\u60c5\u51b5 \u76ee\u524d\u662f\u4e0d\u53ef\u4ee5\u7684\u3002 CAP \u7684\u8bbe\u8ba1\u76ee\u6807\u5373\u4e3a\u5728\u4e0d\u540c\u7684\u5fae\u670d\u52a1\u6216\u8005SOA\u7cfb\u7edf\u4e2d\u6765\u4fdd\u6301\u6570\u636e\u4e00\u81f4\u6027\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u4fdd\u8bc1\u8fd9\u79cd\u6570\u636e\u4e00\u81f4\u6027\u65b9\u6848\u7684\u524d\u63d0\u662f\u5229\u7528\u4e86\u4f20\u7edf\u6570\u636e\u5e93\u7684 ACID \u7279\u6027\uff0c\u5982\u679c\u79bb\u5f00\u4e86\u6570\u636e\u5e93\uff0c\u90a3\u4e48CAP\u4ec5\u4ec5\u662f\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u7684\u5ba2\u6237\u7aef\u5c01\u88c5\uff0c\u8fd9\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002 5\u3001\u4f7f\u7528CAP\u65f6\u5019\uff0c\u4e1a\u52a1\u51fa\u73b0\u9519\u8bef\u600e\u4e48\u56de\u6eda\uff1f \u4e0d\u80fd\u56de\u6eda\uff0cCAP\u662f\u6700\u7ec8\u4e00\u81f4\u6027\u7684\u65b9\u6848\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u4f60\u7684\u573a\u666f\u4e3a\u5728\u8c03\u7528\u7b2c\u4e09\u65b9\u652f\u4ed8\uff0c\u5047\u5982\u4f60\u5728\u8fdb\u884c\u4e00\u9879\u7b2c\u4e09\u65b9\u652f\u4ed8\u7684\u64cd\u4f5c\uff0c\u8c03\u7528\u652f\u4ed8\u5b9d\u7684\u63a5\u53e3\u6210\u529f\u540e\uff0c\u800c\u4f60\u81ea\u5df1\u7684\u4ee3\u7801\u51fa\u73b0\u9519\u8bef\u4e86\uff0c\u652f\u4ed8\u5b9d\u4f1a\u56de\u6eda\u5417\uff1f \u5982\u679c\u4e0d\u56de\u6eda\u90a3\u4e48\u662f\u53c8\u5e94\u8be5\u600e\u4e48\u5904\u7406\u5462\uff1f \u8fd9\u91cc\u4e5f\u662f\u540c\u7406\u3002","title":"FAQ"},{"location":"user-guide-cn/getting-started/","text":"\u4ecb\u7ecd CAP \u662f\u4e00\u4e2a\u9075\u5faa .NET Standard \u6807\u51c6\u5e93\u7684C#\u5e93\uff0c\u7528\u6765\u5904\u7406\u5206\u5e03\u5f0f\u4e8b\u52a1\u4ee5\u53ca\u63d0\u4f9bEventBus\u7684\u529f\u80fd\uff0c\u5979\u5177\u6709\u8f7b\u91cf\u7ea7\uff0c\u9ad8\u6027\u80fd\uff0c\u6613\u4f7f\u7528\u7b49\u7279\u70b9\u3002 \u76ee\u524d CAP \u4f7f\u7528\u7684\u662f .NET Standard 1.6 \u7684\u6807\u51c6\u8fdb\u884c\u5f00\u53d1\uff0c\u76ee\u524d\u6700\u65b0\u9884\u89c8\u7248\u672c\u5df2\u7ecf\u652f\u6301 .NET Standard 2.0. \u5e94\u7528\u573a\u666f CAP \u7684\u5e94\u7528\u573a\u666f\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u4e2a\uff1a \u5206\u5e03\u5f0f\u4e8b\u52a1\u4e2d\u7684\u6700\u7ec8\u4e00\u81f4\u6027\uff08\u5f02\u6b65\u786e\u4fdd\uff09\u7684\u65b9\u6848\u3002 \u5206\u5e03\u5f0f\u4e8b\u52a1\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4e0d\u53ef\u907f\u514d\u7684\u4e00\u4e2a\u786c\u6027\u9700\u6c42\uff0c\u800c\u76ee\u524d\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u65e0\u5916\u4e4e\u5c31\u90a3\u4e48\u51e0\u79cd\uff0c\u5728\u4e86\u89e3 CAP \u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u65b9\u6848\u524d\uff0c\u53ef\u4ee5\u9605\u8bfb\u4ee5\u4e0b \u8fd9\u7bc7\u6587\u7ae0 \u3002 CAP \u6ca1\u6709\u91c7\u7528\u4e24\u9636\u6bb5\u63d0\u4ea4\uff082PC\uff09\u8fd9\u79cd\u4e8b\u52a1\u673a\u5236\uff0c\u800c\u662f\u91c7\u7528\u7684 \u672c\u5730\u6d88\u606f\u8868+MQ \u8fd9\u79cd\u7ecf\u5178\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53c8\u53eb\u505a \u5f02\u6b65\u786e\u4fdd\u3002 \u5177\u6709\u9ad8\u53ef\u7528\u6027\u7684 EventBus\u3002 CAP \u5b9e\u73b0\u4e86 EventBus \u4e2d\u7684\u53d1\u5e03/\u8ba2\u9605\uff0c\u5b83\u5177\u6709 EventBus \u7684\u6240\u6709\u529f\u80fd\u3002\u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528 EventBus \u4e00\u6837\u6765\u4f7f\u7528 CAP\uff0c\u53e6\u5916 CAP \u7684 EventBus \u662f\u5177\u6709\u9ad8\u53ef\u7528\u6027\u7684\uff0c\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f CAP \u501f\u52a9\u4e8e\u672c\u5730\u6d88\u606f\u8868\u6765\u5bf9 EventBus \u4e2d\u7684\u6d88\u606f\u8fdb\u884c\u4e86\u6301\u4e45\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1 EventBus \u53d1\u51fa\u7684\u6d88\u606f\u662f\u53ef\u9760\u7684\uff0c\u5f53\u6d88\u606f\u961f\u5217\u51fa\u73b0\u5b95\u673a\u6216\u8005\u8fde\u63a5\u5931\u8d25\u7684\u60c5\u51b5\u65f6\uff0c\u6d88\u606f\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002 Quick Start \u5f15\u7528 NuGet \u5305 \u4f7f\u7528\u4e00\u4e0b\u547d\u4ee4\u6765\u5f15\u7528CAP\u7684NuGet\u5305\uff1a 1 PM Install-Package DotNetCore.CAP \u6839\u636e\u4f7f\u7528\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6d88\u606f\u961f\u5217\uff0c\u6765\u5f15\u5165\u4e0d\u540c\u7684\u6269\u5c55\u5305\uff1a 1 2 PM Install-Package DotNetCore.CAP.RabbitMQ PM Install-Package DotNetCore.CAP.Kafka \u6839\u636e\u4f7f\u7528\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u6765\u5f15\u5165\u4e0d\u540c\u7684\u6269\u5c55\u5305\uff1a 1 2 3 4 PM Install-Package DotNetCore.CAP.SqlServer PM Install-Package DotNetCore.CAP.MySql PM Install-Package DotNetCore.CAP.PostgreSql PM Install-Package DotNetCore.CAP.MongoDB \u542f\u52a8\u914d\u7f6e \u5728 ASP.NET Core \u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u6587\u4ef6 ConfigureServices() \u4e2d\u914d\u7f6e CAP \u4f7f\u7528\u5230\u7684\u670d\u52a1\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public void ConfigureServices(IServiceCollection services) { //...... services.AddDbContext AppDbContext (); //Options, If you are using EF as the ORM services.AddSingleton IMongoClient (new MongoClient( )); //Options, If you are using MongoDB services.AddCap(x = { // If you are using EF, you need to add the configuration\uff1a x.UseEntityFramework AppDbContext (); //Options, Notice: You don t need to config x.UseSqlServer( ) again! CAP can autodiscovery. // If you are using Ado.Net, you need to add the configuration\uff1a x.UseSqlServer( Your ConnectionStrings ); x.UseMySql( Your ConnectionStrings ); x.UsePostgreSql( Your ConnectionStrings ); // If you are using MongoDB, you need to add the configuration\uff1a x.UseMongoDB( Your ConnectionStrings ); //MongoDB 4.0+ cluster // If you are using RabbitMQ, you need to add the configuration\uff1a x.UseRabbitMQ( localhost ); // If you are using Kafka, you need to add the configuration\uff1a x.UseKafka( localhost ); }); }","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"user-guide-cn/getting-started/#_1","text":"CAP \u662f\u4e00\u4e2a\u9075\u5faa .NET Standard \u6807\u51c6\u5e93\u7684C#\u5e93\uff0c\u7528\u6765\u5904\u7406\u5206\u5e03\u5f0f\u4e8b\u52a1\u4ee5\u53ca\u63d0\u4f9bEventBus\u7684\u529f\u80fd\uff0c\u5979\u5177\u6709\u8f7b\u91cf\u7ea7\uff0c\u9ad8\u6027\u80fd\uff0c\u6613\u4f7f\u7528\u7b49\u7279\u70b9\u3002 \u76ee\u524d CAP \u4f7f\u7528\u7684\u662f .NET Standard 1.6 \u7684\u6807\u51c6\u8fdb\u884c\u5f00\u53d1\uff0c\u76ee\u524d\u6700\u65b0\u9884\u89c8\u7248\u672c\u5df2\u7ecf\u652f\u6301 .NET Standard 2.0.","title":"\u4ecb\u7ecd"},{"location":"user-guide-cn/getting-started/#_2","text":"CAP \u7684\u5e94\u7528\u573a\u666f\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u4e2a\uff1a \u5206\u5e03\u5f0f\u4e8b\u52a1\u4e2d\u7684\u6700\u7ec8\u4e00\u81f4\u6027\uff08\u5f02\u6b65\u786e\u4fdd\uff09\u7684\u65b9\u6848\u3002 \u5206\u5e03\u5f0f\u4e8b\u52a1\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4e0d\u53ef\u907f\u514d\u7684\u4e00\u4e2a\u786c\u6027\u9700\u6c42\uff0c\u800c\u76ee\u524d\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u65e0\u5916\u4e4e\u5c31\u90a3\u4e48\u51e0\u79cd\uff0c\u5728\u4e86\u89e3 CAP \u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u65b9\u6848\u524d\uff0c\u53ef\u4ee5\u9605\u8bfb\u4ee5\u4e0b \u8fd9\u7bc7\u6587\u7ae0 \u3002 CAP \u6ca1\u6709\u91c7\u7528\u4e24\u9636\u6bb5\u63d0\u4ea4\uff082PC\uff09\u8fd9\u79cd\u4e8b\u52a1\u673a\u5236\uff0c\u800c\u662f\u91c7\u7528\u7684 \u672c\u5730\u6d88\u606f\u8868+MQ \u8fd9\u79cd\u7ecf\u5178\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53c8\u53eb\u505a \u5f02\u6b65\u786e\u4fdd\u3002 \u5177\u6709\u9ad8\u53ef\u7528\u6027\u7684 EventBus\u3002 CAP \u5b9e\u73b0\u4e86 EventBus \u4e2d\u7684\u53d1\u5e03/\u8ba2\u9605\uff0c\u5b83\u5177\u6709 EventBus \u7684\u6240\u6709\u529f\u80fd\u3002\u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528 EventBus \u4e00\u6837\u6765\u4f7f\u7528 CAP\uff0c\u53e6\u5916 CAP \u7684 EventBus \u662f\u5177\u6709\u9ad8\u53ef\u7528\u6027\u7684\uff0c\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f CAP \u501f\u52a9\u4e8e\u672c\u5730\u6d88\u606f\u8868\u6765\u5bf9 EventBus \u4e2d\u7684\u6d88\u606f\u8fdb\u884c\u4e86\u6301\u4e45\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1 EventBus \u53d1\u51fa\u7684\u6d88\u606f\u662f\u53ef\u9760\u7684\uff0c\u5f53\u6d88\u606f\u961f\u5217\u51fa\u73b0\u5b95\u673a\u6216\u8005\u8fde\u63a5\u5931\u8d25\u7684\u60c5\u51b5\u65f6\uff0c\u6d88\u606f\u4e5f\u4e0d\u4f1a\u4e22\u5931\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"user-guide-cn/getting-started/#quick-start","text":"\u5f15\u7528 NuGet \u5305 \u4f7f\u7528\u4e00\u4e0b\u547d\u4ee4\u6765\u5f15\u7528CAP\u7684NuGet\u5305\uff1a 1 PM Install-Package DotNetCore.CAP \u6839\u636e\u4f7f\u7528\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6d88\u606f\u961f\u5217\uff0c\u6765\u5f15\u5165\u4e0d\u540c\u7684\u6269\u5c55\u5305\uff1a 1 2 PM Install-Package DotNetCore.CAP.RabbitMQ PM Install-Package DotNetCore.CAP.Kafka \u6839\u636e\u4f7f\u7528\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u6765\u5f15\u5165\u4e0d\u540c\u7684\u6269\u5c55\u5305\uff1a 1 2 3 4 PM Install-Package DotNetCore.CAP.SqlServer PM Install-Package DotNetCore.CAP.MySql PM Install-Package DotNetCore.CAP.PostgreSql PM Install-Package DotNetCore.CAP.MongoDB \u542f\u52a8\u914d\u7f6e \u5728 ASP.NET Core \u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u6587\u4ef6 ConfigureServices() \u4e2d\u914d\u7f6e CAP \u4f7f\u7528\u5230\u7684\u670d\u52a1\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public void ConfigureServices(IServiceCollection services) { //...... services.AddDbContext AppDbContext (); //Options, If you are using EF as the ORM services.AddSingleton IMongoClient (new MongoClient( )); //Options, If you are using MongoDB services.AddCap(x = { // If you are using EF, you need to add the configuration\uff1a x.UseEntityFramework AppDbContext (); //Options, Notice: You don t need to config x.UseSqlServer( ) again! CAP can autodiscovery. // If you are using Ado.Net, you need to add the configuration\uff1a x.UseSqlServer( Your ConnectionStrings ); x.UseMySql( Your ConnectionStrings ); x.UsePostgreSql( Your ConnectionStrings ); // If you are using MongoDB, you need to add the configuration\uff1a x.UseMongoDB( Your ConnectionStrings ); //MongoDB 4.0+ cluster // If you are using RabbitMQ, you need to add the configuration\uff1a x.UseRabbitMQ( localhost ); // If you are using Kafka, you need to add the configuration\uff1a x.UseKafka( localhost ); }); }","title":"Quick Start"},{"location":"user-guide-cn/implementation-mechanisms/","text":"CAP \u5c01\u88c5\u4e86\u5728 ASP.NET Core \u4e2d\u7684\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u83b7\u53d6 Publisher \uff08 ICapPublisher \uff09\u7684\u63a5\u53e3\u3002\u800c\u542f\u52a8\u65b9\u5f0f\u7c7b\u4f3c\u4e8e \u201c\u4e2d\u95f4\u4ef6\u201d \u7684\u5f62\u5f0f\uff0c\u901a\u8fc7\u5728 Startup.cs \u914d\u7f6e ConfigureServices \u548c Configure \u8fdb\u884c\u542f\u52a8\u3002 \u6d88\u606f\u8868 \u5f53\u7cfb\u7edf\u5f15\u5165CAP\u4e4b\u540e\u5e76\u9996\u6b21\u542f\u52a8\u540e\uff0cCAP\u4f1a\u5728\u5ba2\u6237\u7aef\u751f\u6210 2 \u4e2a\u8868\uff0c\u5206\u522b\u662f Cap.Published, Cap.Received \u3002\u6ce8\u610f\u8868\u540d\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u6570\u636e\u5e93\u5177\u6709\u4e0d\u540c\u7684\u5927\u5c0f\u5199\u533a\u5206\uff0c\u5982\u679c\u4f60\u5728\u8fd0\u884c\u9879\u76ee\u7684\u65f6\u5019\u6ca1\u6709\u663e\u5f0f\u7684\u6307\u5b9a\u6570\u636e\u5e93\u751f\u6210\u67b6\u6784(Schema)\u6216\u8005\u8868\u540d\u524d\u7f00(TableNamePrefix)\u7684\u8bdd\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c31\u662f\u4ee5\u4e0a\u7684\u540d\u5b57\u3002 Cap.Published \uff1a\u8fd9\u4e2a\u8868\u4e3b\u8981\u662f\u7528\u6765\u5b58\u50a8 CAP \u53d1\u9001\u5230MQ(Message Queue)\u7684\u5ba2\u6237\u7aef\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u4f7f\u7528 ICapPublisher \u63a5\u53e3 Publish \u7684\u6d88\u606f\u5185\u5bb9\u3002 Cap.Received \uff1a\u8fd9\u4e2a\u8868\u4e3b\u8981\u662f\u7528\u6765\u5b58\u50a8 CAP \u63a5\u6536\u5230 MQ(Message Queue) \u7684\u5ba2\u6237\u7aef\u8ba2\u9605\u7684\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528 CapSubscribe[] \u8ba2\u9605\u7684\u90a3\u4e9b\u6d88\u606f\u3002 2.2 \u7248\u672c\u4ee5\u524d\uff1a Cap.Queue \uff1a \u8fd9\u4e2a\u8868\u4e3b\u8981\u662fCAP\u5185\u90e8\u7528\u6765\u5904\u7406\u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f\u7684\u4e00\u4e2a\u4e34\u65f6\u8868\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7cfb\u7edf\u4e0d\u51fa\u73b0\u95ee\u9898\uff0c\u8fd9\u4e2a\u8868\u5c06\u662f\u7a7a\u7684\u3002 Published \u548c Received \u8868\u5177\u6709 StatusName \u5b57\u6bb5\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u7528\u6765\u6807\u8bc6\u5f53\u524d\u6d88\u606f\u7684\u72b6\u6001\u3002\u76ee\u524d\u5171\u6709 Scheduled \uff0c Successed \uff0c Failed \u7b49\u51e0\u4e2a\u72b6\u6001\u3002 \u5728 2.2 \u7248\u672c\u4ee5\u524d\u7684\u6240\u6709\u72b6\u6001\u4e3a\uff1a Scheduled \uff0c Enqueued \uff0c Processing \uff0c Successed \uff0c Failed CAP \u5728\u5904\u7406\u6d88\u606f\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4f9d\u6b21\u4ece Scheduled \u5230 Successed \u6765\u6539\u53d8\u8fd9\u4e9b\u6d88\u606f\u72b6\u6001\u7684\u503c\u3002\u5982\u679c\u662f\u72b6\u6001\u503c\u4e3a Successed \uff0c\u4ee3\u8868\u8be5\u6d88\u606f\u5df2\u7ecf\u6210\u529f\u7684\u53d1\u9001\u5230\u4e86 MQ \u4e2d\u3002\u5982\u679c\u4e3a Failed \u5219\u4ee3\u8868\u6d88\u606f\u53d1\u9001\u5931\u8d25\u3002 CAP 2.2 \u4ee5\u4e0a\u7248\u672c\u4e2d\u4f1a\u9488\u5bf9 Scheduled , Failed \u72b6\u6001\u7684\u6d88\u606f CAP \u4f1a\u4e8e\u6d88\u606f\u6301\u4e45\u5316\u8fc7\u540e 4 \u5206\u949f\u540e\u5f00\u59cb\u8fdb\u884c\u91cd\u8bd5\uff0c\u91cd\u8bd5\u7684\u95f4\u9694\u9ed8\u8ba4\u4e3a 60 \u79d2\uff0c\u4f60\u53ef\u4ee5\u5728 CapOptions \u4e2d\u914d\u7f6e\u7684 FailedRetryInterval \u6765\u8c03\u6574\u9ed8\u8ba4\u95f4\u9694\u65f6\u95f4\u3002 2.2 \u7248\u672c\u4ee5\u524d\uff0c CAP \u4f1a\u5bf9\u72b6\u6001\u4e3a Failed \u7684\u6d88\u606f\u9ed8\u8ba4\u8fdb\u884c 100 \u6b21\u91cd\u8bd5\u3002 \u6d88\u606f\u683c\u5f0f CAP \u91c7\u7528 JSON \u683c\u5f0f\u8fdb\u884c\u6d88\u606f\u4f20\u8f93\uff0c\u4ee5\u4e0b\u662f\u6d88\u606f\u7684\u5bf9\u8c61\u6a21\u578b\uff1a NAME DESCRIPTION TYPE Id \u6d88\u606f\u7f16\u53f7 int Version \u6d88\u606f\u7248\u672c string Name \u6d88\u606f\u540d\u79f0 string Content \u5185\u5bb9 string Group \u6240\u5c5e\u6d88\u8d39\u7ec4 string Added \u3000\u521b\u5efa\u65f6\u95f4 DateTime ExpiresAt \u8fc7\u671f\u65f6\u95f4 DateTime Retries \u91cd\u8bd5\u6b21\u6570 int StatusName \u72b6\u6001 string \u5bf9\u4e8e Cap.Received \u4e2d\u7684\u6d88\u606f\uff0c\u4f1a\u591a\u4e00\u4e2a Group \u5b57\u6bb5\u6765\u6807\u8bb0\u6240\u5c5e\u7684\u6d88\u8d39\u8005\u7ec4\u3002 \u5bf9\u4e8e\u6d88\u606f\u5185\u5bb9 Content \u5c5e\u6027\u91cc\u9762\u7684\u5185\u5bb9CAP \u4f7f\u7528 Message \u5bf9\u8c61\u8fdb\u884c\u4e86\u4e00\u6b21\u4e8c\u6b21\u5305\u88c5\u3002\u4e00\u4e0b\u4e3aMessage\u5bf9\u8c61\u7684\u4fe1\u606f NAME DESCRIPTION TYPE Id CAP\u751f\u6210\u7684\u6d88\u606f\u7f16\u53f7 string Timestamp \u6d88\u606f\u521b\u5efa\u65f6\u95f4 string Content \u5185\u5bb9 string CallbackName \u56de\u8c03\u7684\u8ba2\u9605\u8005\u540d\u79f0 string \u5176\u4e2d Id \u5b57\u6bb5\uff0cCAP \u91c7\u7528\u7684 MongoDB \u4e2d\u7684 ObjectId \u5206\u5e03\u5f0fId\u751f\u6210\u7b97\u6cd5\u751f\u6210\u3002 EventBus EventBus \u91c7\u7528 \u53d1\u5e03-\u8ba2\u9605 \u98ce\u683c\u8fdb\u884c\u7ec4\u4ef6\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u5b83\u4e0d\u9700\u8981\u663e\u5f0f\u5728\u7ec4\u4ef6\u4e2d\u8fdb\u884c\u6ce8\u518c\u3002 \u4e0a\u56fe\u662fEventBus\u7684\u4e00\u4e2aEvent\u7684\u6d41\u7a0b\uff0c\u5173\u4e8e EventBus \u7684\u66f4\u591a\u4fe1\u606f\u5c31\u4e0d\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e86... \u5728 CAP \u4e2d\uff0c\u4e3a\u4ec0\u4e48\u8bf4 CAP \u5b9e\u73b0\u4e86 EventBus \u4e2d\u7684\u5168\u90e8\u7279\u6027\uff0c\u56e0\u4e3a EventBus \u5177\u6709\u7684\u4e24\u4e2a\u5927\u529f\u80fd\u5c31\u662f\u53d1\u5e03\u548c\u8ba2\u9605\uff0c \u5728 CAP \u4e2d \u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u53e6\u5916\u4e00\u4e2a CAP \u63d0\u4f9b\u7684\u5f3a\u5927\u529f\u80fd\u5c31\u662f\u6d88\u606f\u7684\u6301\u4e45\u5316\uff0c\u4ee5\u53ca\u5728\u4efb\u4f55\u5f02\u5e38\u60c5\u51b5\u4e0b\u6d88\u606f\u7684\u53ef\u9760\u6027\uff0c\u8fd9\u662fEventBus\u4e0d\u5177\u6709\u7684\u529f\u80fd\u3002 CAP \u91cc\u9762\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a \u201cEvent\u201d\uff0c\u4e00\u4e2a\u4f7f\u7528\u4e86CAP\u7684ASP.NET Core \u5e94\u7528\u7a0b\u5e8f\u65e2\u53ef\u4ee5\u8fdb\u884c\u53d1\u9001\u4e5f\u53ef\u4ee5\u8fdb\u884c\u8ba2\u9605\u63a5\u6536\u3002 \u91cd\u8bd5 \u91cd\u8bd5\u5728\u6574\u4e2aCAP\u67b6\u6784\u8bbe\u8ba1\u4e2d\u5177\u6709\u91cd\u8981\u4f5c\u7528\uff0cCAP \u4e2d\u4f1a\u9488\u5bf9\u53d1\u9001\u5931\u8d25\u6216\u8005\u6267\u884c\u5931\u8d25\u7684\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u3002\u5728\u6574\u4e2a CAP \u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u6709\u4ee5\u4e0b\u51e0\u5904\u91c7\u7528\u7684\u91cd\u8bd5\u7b56\u7565\u3002 1\u3001 \u53d1\u9001\u91cd\u8bd5 \u5728\u6d88\u606f\u53d1\u9001\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u51fa\u73b0 Broker \u5b95\u673a\u6216\u8005\u8fde\u63a5\u5931\u8d25\u7684\u60c5\u51b5\u4ea6\u6216\u8005\u51fa\u73b0\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65f6\u5019 CAP \u4f1a\u5bf9\u53d1\u9001\u7684\u91cd\u8bd5\uff0c\u7b2c\u4e00\u6b21\u91cd\u8bd5\u6b21\u6570\u4e3a 3\uff0c \u4ee5\u540e\u6bcf\u5206\u949f\u91cd\u8bd5\u4e00\u6b21\uff0c\u8fdb\u884c\u6b21\u6570 +1\uff0c\u5f53\u603b\u6b21\u6570\u8fbe\u523050\u6b21\u540e\uff0cCAP\u5c06\u4e0d\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\u3002 \u4f60\u53ef\u4ee5\u5728 CapOptions \u4e2d\u8bbe\u7f6e FailedRetryCount \u6765\u8c03\u6574\u9ed8\u8ba4\u91cd\u8bd5\u7684\u603b\u6b21\u6570\u3002 \u5f53\u5931\u8d25\u603b\u6b21\u6570\u8fbe\u5230\u9ed8\u8ba4\u5931\u8d25\u603b\u6b21\u6570\u540e\uff0c\u5c31\u4e0d\u4f1a\u8fdb\u884c\u91cd\u8bd5\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728 Dashboard \u4e2d\u67e5\u770b\u6d88\u606f\u5931\u8d25\u7684\u539f\u56e0\uff0c\u7136\u540e\u8fdb\u884c\u4eba\u5de5\u91cd\u8bd5\u5904\u7406\u3002 2\u3001 \u6d88\u8d39\u91cd\u8bd5 \u5f53 Consumer \u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u4f1a\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\uff0c\u5728\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u4f1a\u8fdb\u884c\u91cd\u8bd5\u3002\u8fd9\u4e2a\u91cd\u8bd5\u7b56\u7565\u548c\u4e0a\u9762\u7684 \u53d1\u9001\u91cd\u8bd5 \u662f\u76f8\u540c\u7684\u3002 \u6570\u636e\u6e05\u7406 \u6570\u636e\u5e93\u6d88\u606f\u8868\u4e2d\u5177\u6709\u4e00\u4e2a ExpiresAt \u5b57\u6bb5\u8868\u793a\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5f53\u6d88\u606f\u53d1\u9001\u6210\u529f\u6216\u8005\u6d88\u8d39\u6210\u529f\u540e\uff0cCAP\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Successed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 1\u5c0f\u65f6 \u540e\u8fc7\u671f\uff0c\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Failed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 15\u5929 \u540e\u8fc7\u671f\u3002 CAP \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6bcf\u9694\u4e00\u4e2a\u5c0f\u65f6\u5c06\u6d88\u606f\u8868\u7684\u6570\u636e\u8fdb\u884c\u6e05\u7406\u5220\u9664\uff0c\u907f\u514d\u6570\u636e\u91cf\u8fc7\u591a\u5bfc\u81f4\u6027\u80fd\u7684\u964d\u4f4e\u3002\u6e05\u7406\u89c4\u5219\u4e3a ExpiresAt \u4e0d\u4e3a\u7a7a\u5e76\u4e14\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\u6570\u636e\u3002 \u4e5f\u5c31\u662f\u8bf4\u72b6\u6001\u4e3a Failed \u7684\u6d88\u606f\uff08\u6b63\u5e38\u60c5\u51b5\u4ed6\u4eec\u5df2\u7ecf\u88ab\u91cd\u8bd5\u4e86 50 \u6b21\uff09\uff0c\u5982\u679c\u4f6015\u5929\u6ca1\u6709\u4eba\u5de5\u4ecb\u5165\u5904\u7406\uff0c\u540c\u6837\u4f1a\u88ab\u6e05\u7406\u6389\u3002","title":"\u5b9e\u73b0"},{"location":"user-guide-cn/implementation-mechanisms/#_1","text":"\u5f53\u7cfb\u7edf\u5f15\u5165CAP\u4e4b\u540e\u5e76\u9996\u6b21\u542f\u52a8\u540e\uff0cCAP\u4f1a\u5728\u5ba2\u6237\u7aef\u751f\u6210 2 \u4e2a\u8868\uff0c\u5206\u522b\u662f Cap.Published, Cap.Received \u3002\u6ce8\u610f\u8868\u540d\u53ef\u80fd\u5728\u4e0d\u540c\u7684\u6570\u636e\u5e93\u5177\u6709\u4e0d\u540c\u7684\u5927\u5c0f\u5199\u533a\u5206\uff0c\u5982\u679c\u4f60\u5728\u8fd0\u884c\u9879\u76ee\u7684\u65f6\u5019\u6ca1\u6709\u663e\u5f0f\u7684\u6307\u5b9a\u6570\u636e\u5e93\u751f\u6210\u67b6\u6784(Schema)\u6216\u8005\u8868\u540d\u524d\u7f00(TableNamePrefix)\u7684\u8bdd\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c31\u662f\u4ee5\u4e0a\u7684\u540d\u5b57\u3002 Cap.Published \uff1a\u8fd9\u4e2a\u8868\u4e3b\u8981\u662f\u7528\u6765\u5b58\u50a8 CAP \u53d1\u9001\u5230MQ(Message Queue)\u7684\u5ba2\u6237\u7aef\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u4f7f\u7528 ICapPublisher \u63a5\u53e3 Publish \u7684\u6d88\u606f\u5185\u5bb9\u3002 Cap.Received \uff1a\u8fd9\u4e2a\u8868\u4e3b\u8981\u662f\u7528\u6765\u5b58\u50a8 CAP \u63a5\u6536\u5230 MQ(Message Queue) \u7684\u5ba2\u6237\u7aef\u8ba2\u9605\u7684\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528 CapSubscribe[] \u8ba2\u9605\u7684\u90a3\u4e9b\u6d88\u606f\u3002 2.2 \u7248\u672c\u4ee5\u524d\uff1a Cap.Queue \uff1a \u8fd9\u4e2a\u8868\u4e3b\u8981\u662fCAP\u5185\u90e8\u7528\u6765\u5904\u7406\u53d1\u9001\u548c\u63a5\u6536\u6d88\u606f\u7684\u4e00\u4e2a\u4e34\u65f6\u8868\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u7cfb\u7edf\u4e0d\u51fa\u73b0\u95ee\u9898\uff0c\u8fd9\u4e2a\u8868\u5c06\u662f\u7a7a\u7684\u3002 Published \u548c Received \u8868\u5177\u6709 StatusName \u5b57\u6bb5\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u7528\u6765\u6807\u8bc6\u5f53\u524d\u6d88\u606f\u7684\u72b6\u6001\u3002\u76ee\u524d\u5171\u6709 Scheduled \uff0c Successed \uff0c Failed \u7b49\u51e0\u4e2a\u72b6\u6001\u3002 \u5728 2.2 \u7248\u672c\u4ee5\u524d\u7684\u6240\u6709\u72b6\u6001\u4e3a\uff1a Scheduled \uff0c Enqueued \uff0c Processing \uff0c Successed \uff0c Failed CAP \u5728\u5904\u7406\u6d88\u606f\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4f9d\u6b21\u4ece Scheduled \u5230 Successed \u6765\u6539\u53d8\u8fd9\u4e9b\u6d88\u606f\u72b6\u6001\u7684\u503c\u3002\u5982\u679c\u662f\u72b6\u6001\u503c\u4e3a Successed \uff0c\u4ee3\u8868\u8be5\u6d88\u606f\u5df2\u7ecf\u6210\u529f\u7684\u53d1\u9001\u5230\u4e86 MQ \u4e2d\u3002\u5982\u679c\u4e3a Failed \u5219\u4ee3\u8868\u6d88\u606f\u53d1\u9001\u5931\u8d25\u3002 CAP 2.2 \u4ee5\u4e0a\u7248\u672c\u4e2d\u4f1a\u9488\u5bf9 Scheduled , Failed \u72b6\u6001\u7684\u6d88\u606f CAP \u4f1a\u4e8e\u6d88\u606f\u6301\u4e45\u5316\u8fc7\u540e 4 \u5206\u949f\u540e\u5f00\u59cb\u8fdb\u884c\u91cd\u8bd5\uff0c\u91cd\u8bd5\u7684\u95f4\u9694\u9ed8\u8ba4\u4e3a 60 \u79d2\uff0c\u4f60\u53ef\u4ee5\u5728 CapOptions \u4e2d\u914d\u7f6e\u7684 FailedRetryInterval \u6765\u8c03\u6574\u9ed8\u8ba4\u95f4\u9694\u65f6\u95f4\u3002 2.2 \u7248\u672c\u4ee5\u524d\uff0c CAP \u4f1a\u5bf9\u72b6\u6001\u4e3a Failed \u7684\u6d88\u606f\u9ed8\u8ba4\u8fdb\u884c 100 \u6b21\u91cd\u8bd5\u3002","title":"\u6d88\u606f\u8868"},{"location":"user-guide-cn/implementation-mechanisms/#_2","text":"CAP \u91c7\u7528 JSON \u683c\u5f0f\u8fdb\u884c\u6d88\u606f\u4f20\u8f93\uff0c\u4ee5\u4e0b\u662f\u6d88\u606f\u7684\u5bf9\u8c61\u6a21\u578b\uff1a NAME DESCRIPTION TYPE Id \u6d88\u606f\u7f16\u53f7 int Version \u6d88\u606f\u7248\u672c string Name \u6d88\u606f\u540d\u79f0 string Content \u5185\u5bb9 string Group \u6240\u5c5e\u6d88\u8d39\u7ec4 string Added \u3000\u521b\u5efa\u65f6\u95f4 DateTime ExpiresAt \u8fc7\u671f\u65f6\u95f4 DateTime Retries \u91cd\u8bd5\u6b21\u6570 int StatusName \u72b6\u6001 string \u5bf9\u4e8e Cap.Received \u4e2d\u7684\u6d88\u606f\uff0c\u4f1a\u591a\u4e00\u4e2a Group \u5b57\u6bb5\u6765\u6807\u8bb0\u6240\u5c5e\u7684\u6d88\u8d39\u8005\u7ec4\u3002 \u5bf9\u4e8e\u6d88\u606f\u5185\u5bb9 Content \u5c5e\u6027\u91cc\u9762\u7684\u5185\u5bb9CAP \u4f7f\u7528 Message \u5bf9\u8c61\u8fdb\u884c\u4e86\u4e00\u6b21\u4e8c\u6b21\u5305\u88c5\u3002\u4e00\u4e0b\u4e3aMessage\u5bf9\u8c61\u7684\u4fe1\u606f NAME DESCRIPTION TYPE Id CAP\u751f\u6210\u7684\u6d88\u606f\u7f16\u53f7 string Timestamp \u6d88\u606f\u521b\u5efa\u65f6\u95f4 string Content \u5185\u5bb9 string CallbackName \u56de\u8c03\u7684\u8ba2\u9605\u8005\u540d\u79f0 string \u5176\u4e2d Id \u5b57\u6bb5\uff0cCAP \u91c7\u7528\u7684 MongoDB \u4e2d\u7684 ObjectId \u5206\u5e03\u5f0fId\u751f\u6210\u7b97\u6cd5\u751f\u6210\u3002","title":"\u6d88\u606f\u683c\u5f0f"},{"location":"user-guide-cn/implementation-mechanisms/#eventbus","text":"EventBus \u91c7\u7528 \u53d1\u5e03-\u8ba2\u9605 \u98ce\u683c\u8fdb\u884c\u7ec4\u4ef6\u4e4b\u95f4\u7684\u901a\u8baf\uff0c\u5b83\u4e0d\u9700\u8981\u663e\u5f0f\u5728\u7ec4\u4ef6\u4e2d\u8fdb\u884c\u6ce8\u518c\u3002 \u4e0a\u56fe\u662fEventBus\u7684\u4e00\u4e2aEvent\u7684\u6d41\u7a0b\uff0c\u5173\u4e8e EventBus \u7684\u66f4\u591a\u4fe1\u606f\u5c31\u4e0d\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e86... \u5728 CAP \u4e2d\uff0c\u4e3a\u4ec0\u4e48\u8bf4 CAP \u5b9e\u73b0\u4e86 EventBus \u4e2d\u7684\u5168\u90e8\u7279\u6027\uff0c\u56e0\u4e3a EventBus \u5177\u6709\u7684\u4e24\u4e2a\u5927\u529f\u80fd\u5c31\u662f\u53d1\u5e03\u548c\u8ba2\u9605\uff0c \u5728 CAP \u4e2d \u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u53e6\u5916\u4e00\u4e2a CAP \u63d0\u4f9b\u7684\u5f3a\u5927\u529f\u80fd\u5c31\u662f\u6d88\u606f\u7684\u6301\u4e45\u5316\uff0c\u4ee5\u53ca\u5728\u4efb\u4f55\u5f02\u5e38\u60c5\u51b5\u4e0b\u6d88\u606f\u7684\u53ef\u9760\u6027\uff0c\u8fd9\u662fEventBus\u4e0d\u5177\u6709\u7684\u529f\u80fd\u3002 CAP \u91cc\u9762\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a \u201cEvent\u201d\uff0c\u4e00\u4e2a\u4f7f\u7528\u4e86CAP\u7684ASP.NET Core \u5e94\u7528\u7a0b\u5e8f\u65e2\u53ef\u4ee5\u8fdb\u884c\u53d1\u9001\u4e5f\u53ef\u4ee5\u8fdb\u884c\u8ba2\u9605\u63a5\u6536\u3002","title":"EventBus"},{"location":"user-guide-cn/implementation-mechanisms/#_3","text":"\u91cd\u8bd5\u5728\u6574\u4e2aCAP\u67b6\u6784\u8bbe\u8ba1\u4e2d\u5177\u6709\u91cd\u8981\u4f5c\u7528\uff0cCAP \u4e2d\u4f1a\u9488\u5bf9\u53d1\u9001\u5931\u8d25\u6216\u8005\u6267\u884c\u5931\u8d25\u7684\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u3002\u5728\u6574\u4e2a CAP \u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u6709\u4ee5\u4e0b\u51e0\u5904\u91c7\u7528\u7684\u91cd\u8bd5\u7b56\u7565\u3002 1\u3001 \u53d1\u9001\u91cd\u8bd5 \u5728\u6d88\u606f\u53d1\u9001\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u51fa\u73b0 Broker \u5b95\u673a\u6216\u8005\u8fde\u63a5\u5931\u8d25\u7684\u60c5\u51b5\u4ea6\u6216\u8005\u51fa\u73b0\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65f6\u5019 CAP \u4f1a\u5bf9\u53d1\u9001\u7684\u91cd\u8bd5\uff0c\u7b2c\u4e00\u6b21\u91cd\u8bd5\u6b21\u6570\u4e3a 3\uff0c \u4ee5\u540e\u6bcf\u5206\u949f\u91cd\u8bd5\u4e00\u6b21\uff0c\u8fdb\u884c\u6b21\u6570 +1\uff0c\u5f53\u603b\u6b21\u6570\u8fbe\u523050\u6b21\u540e\uff0cCAP\u5c06\u4e0d\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\u3002 \u4f60\u53ef\u4ee5\u5728 CapOptions \u4e2d\u8bbe\u7f6e FailedRetryCount \u6765\u8c03\u6574\u9ed8\u8ba4\u91cd\u8bd5\u7684\u603b\u6b21\u6570\u3002 \u5f53\u5931\u8d25\u603b\u6b21\u6570\u8fbe\u5230\u9ed8\u8ba4\u5931\u8d25\u603b\u6b21\u6570\u540e\uff0c\u5c31\u4e0d\u4f1a\u8fdb\u884c\u91cd\u8bd5\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728 Dashboard \u4e2d\u67e5\u770b\u6d88\u606f\u5931\u8d25\u7684\u539f\u56e0\uff0c\u7136\u540e\u8fdb\u884c\u4eba\u5de5\u91cd\u8bd5\u5904\u7406\u3002 2\u3001 \u6d88\u8d39\u91cd\u8bd5 \u5f53 Consumer \u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u4f1a\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\uff0c\u5728\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u4f1a\u8fdb\u884c\u91cd\u8bd5\u3002\u8fd9\u4e2a\u91cd\u8bd5\u7b56\u7565\u548c\u4e0a\u9762\u7684 \u53d1\u9001\u91cd\u8bd5 \u662f\u76f8\u540c\u7684\u3002","title":"\u91cd\u8bd5"},{"location":"user-guide-cn/implementation-mechanisms/#_4","text":"\u6570\u636e\u5e93\u6d88\u606f\u8868\u4e2d\u5177\u6709\u4e00\u4e2a ExpiresAt \u5b57\u6bb5\u8868\u793a\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5f53\u6d88\u606f\u53d1\u9001\u6210\u529f\u6216\u8005\u6d88\u8d39\u6210\u529f\u540e\uff0cCAP\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Successed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 1\u5c0f\u65f6 \u540e\u8fc7\u671f\uff0c\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Failed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 15\u5929 \u540e\u8fc7\u671f\u3002 CAP \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6bcf\u9694\u4e00\u4e2a\u5c0f\u65f6\u5c06\u6d88\u606f\u8868\u7684\u6570\u636e\u8fdb\u884c\u6e05\u7406\u5220\u9664\uff0c\u907f\u514d\u6570\u636e\u91cf\u8fc7\u591a\u5bfc\u81f4\u6027\u80fd\u7684\u964d\u4f4e\u3002\u6e05\u7406\u89c4\u5219\u4e3a ExpiresAt \u4e0d\u4e3a\u7a7a\u5e76\u4e14\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\u6570\u636e\u3002 \u4e5f\u5c31\u662f\u8bf4\u72b6\u6001\u4e3a Failed \u7684\u6d88\u606f\uff08\u6b63\u5e38\u60c5\u51b5\u4ed6\u4eec\u5df2\u7ecf\u88ab\u91cd\u8bd5\u4e86 50 \u6b21\uff09\uff0c\u5982\u679c\u4f6015\u5929\u6ca1\u6709\u4eba\u5de5\u4ecb\u5165\u5904\u7406\uff0c\u540c\u6837\u4f1a\u88ab\u6e05\u7406\u6389\u3002","title":"\u6570\u636e\u6e05\u7406"}]}